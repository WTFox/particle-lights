
/Users/anthonyfox/dev/particle-lights/target/1.0.1/photon/particle-lights.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002968  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a2980  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000070  20000300  080a2984  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000005a0  20000370  20000370  00030370  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a29f4  080a29f4  000229f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a2a1c  080a2a1c  00022a1c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   0009efdf  00000000  00000000  00022a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000e6e6  00000000  00000000  000c19ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00013471  00000000  00000000  000d00e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001dd8  00000000  00000000  000e3556  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003120  00000000  00000000  000e532e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00023391  00000000  00000000  000e844e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00020574  00000000  00000000  0010b7df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000974ad  00000000  00000000  0012bd53  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000b410  00000000  00000000  001c3200  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	b8 25 0a 08                                         .%..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 f9ef 	bl	80a2410 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 f9f4 	bl	80a2426 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a2984 	.word	0x080a2984
 80a004c:	20000370 	.word	0x20000370
 80a0050:	20000370 	.word	0x20000370
 80a0054:	20000910 	.word	0x20000910
 80a0058:	20000910 	.word	0x20000910

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 ffa3 	bl	80a1fa8 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a2944 	.word	0x080a2944
 80a0084:	080a2978 	.word	0x080a2978

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b832 	b.w	80a00f0 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f8b3 	bl	80a01f8 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 bf49 	b.w	80a1f2c <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f001 bbe7 	b.w	80a186c <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <_Z13setBrightness6String>:
void loop() {
  strip.setBrightness(brightness);
  defaultRoutine("");
}

int setBrightness(String input) {
 80a00b0:	b508      	push	{r3, lr}
  brightness = input.toInt();
 80a00b2:	f001 fda4 	bl	80a1bfe <_ZNK6String5toIntEv>
 80a00b6:	4b02      	ldr	r3, [pc, #8]	; (80a00c0 <_Z13setBrightness6String+0x10>)
 80a00b8:	6018      	str	r0, [r3, #0]
  return 0;
}
 80a00ba:	2000      	movs	r0, #0
 80a00bc:	bd08      	pop	{r3, pc}
 80a00be:	bf00      	nop
 80a00c0:	20000300 	.word	0x20000300

080a00c4 <_Z12notifyOnCall6String>:
int defaultRoutine(String input) {
  rainbow(20);
  return 0;
}

int notifyOnCall(String input) {
 80a00c4:	b538      	push	{r3, r4, r5, lr}
 80a00c6:	2400      	movs	r4, #0
  uint16_t i;
  for (i = 0; i < strip.numPixels(); i++) {
 80a00c8:	4808      	ldr	r0, [pc, #32]	; (80a00ec <_Z12notifyOnCall6String+0x28>)
 80a00ca:	f001 fa4f 	bl	80a156c <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a00ce:	b2a5      	uxth	r5, r4
 80a00d0:	4285      	cmp	r5, r0
 80a00d2:	f104 0401 	add.w	r4, r4, #1
 80a00d6:	d206      	bcs.n	80a00e6 <_Z12notifyOnCall6String+0x22>
    strip.setPixelColor(i, RGB_COLOR_MAGENTA);
 80a00d8:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
 80a00dc:	4629      	mov	r1, r5
 80a00de:	4803      	ldr	r0, [pc, #12]	; (80a00ec <_Z12notifyOnCall6String+0x28>)
 80a00e0:	f001 f9f4 	bl	80a14cc <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  return 0;
}

int notifyOnCall(String input) {
  uint16_t i;
  for (i = 0; i < strip.numPixels(); i++) {
 80a00e4:	e7f0      	b.n	80a00c8 <_Z12notifyOnCall6String+0x4>
    strip.setPixelColor(i, RGB_COLOR_MAGENTA);
  }
  return 0;
}
 80a00e6:	2000      	movs	r0, #0
 80a00e8:	bd38      	pop	{r3, r4, r5, pc}
 80a00ea:	bf00      	nop
 80a00ec:	20000374 	.word	0x20000374

080a00f0 <setup>:

int defaultRoutine(String input);

int brightness = 100;

void setup() {
 80a00f0:	b510      	push	{r4, lr}
  strip.begin();
 80a00f2:	4c0f      	ldr	r4, [pc, #60]	; (80a0130 <setup+0x40>)
 80a00f4:	4620      	mov	r0, r4
 80a00f6:	f000 f8f9 	bl	80a02ec <_ZN17Adafruit_NeoPixel5beginEv>
  strip.show();
 80a00fa:	4620      	mov	r0, r4
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80a00fc:	4c0d      	ldr	r4, [pc, #52]	; (80a0134 <setup+0x44>)
 80a00fe:	f000 f92b 	bl	80a0358 <_ZN17Adafruit_NeoPixel4showEv>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 80a0102:	2300      	movs	r3, #0
 80a0104:	2202      	movs	r2, #2
 80a0106:	490c      	ldr	r1, [pc, #48]	; (80a0138 <setup+0x48>)
 80a0108:	480c      	ldr	r0, [pc, #48]	; (80a013c <setup+0x4c>)
 80a010a:	f001 fb87 	bl	80a181c <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80a010e:	4a0c      	ldr	r2, [pc, #48]	; (80a0140 <setup+0x50>)
 80a0110:	490c      	ldr	r1, [pc, #48]	; (80a0144 <setup+0x54>)
 80a0112:	4620      	mov	r0, r4
 80a0114:	f001 fbdc 	bl	80a18d0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a0118:	4a0b      	ldr	r2, [pc, #44]	; (80a0148 <setup+0x58>)
 80a011a:	490c      	ldr	r1, [pc, #48]	; (80a014c <setup+0x5c>)
 80a011c:	4620      	mov	r0, r4
 80a011e:	f001 fbd7 	bl	80a18d0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a0122:	4620      	mov	r0, r4
  Particle.variable("brightness", brightness);

  Particle.function("setBrightness", setBrightness);
  Particle.function("notifyOnCall", notifyOnCall);
  Particle.function("defaultRoutine", defaultRoutine);
}
 80a0124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0128:	4a09      	ldr	r2, [pc, #36]	; (80a0150 <setup+0x60>)
 80a012a:	490a      	ldr	r1, [pc, #40]	; (80a0154 <setup+0x64>)
 80a012c:	f001 bbd0 	b.w	80a18d0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a0130:	20000374 	.word	0x20000374
 80a0134:	080a18a5 	.word	0x080a18a5
 80a0138:	20000300 	.word	0x20000300
 80a013c:	080a25cc 	.word	0x080a25cc
 80a0140:	080a25d7 	.word	0x080a25d7
 80a0144:	080a00b1 	.word	0x080a00b1
 80a0148:	080a25e5 	.word	0x080a25e5
 80a014c:	080a00c5 	.word	0x080a00c5
 80a0150:	080a25f2 	.word	0x080a25f2
 80a0154:	080a01ed 	.word	0x080a01ed

080a0158 <_Z5Wheelh>:
}

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  if (WheelPos < 85) {
 80a0158:	2854      	cmp	r0, #84	; 0x54
 80a015a:	d809      	bhi.n	80a0170 <_Z5Wheelh+0x18>
    return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
 80a015c:	eba0 0180 	sub.w	r1, r0, r0, lsl #2
 80a0160:	3901      	subs	r1, #1
 80a0162:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80a0166:	2200      	movs	r2, #0
 80a0168:	b2c9      	uxtb	r1, r1
 80a016a:	b2c0      	uxtb	r0, r0
 80a016c:	f001 b9f9 	b.w	80a1562 <_ZN17Adafruit_NeoPixel5ColorEhhh>
  } else if (WheelPos < 170) {
 80a0170:	28a9      	cmp	r0, #169	; 0xa9
 80a0172:	d80b      	bhi.n	80a018c <_Z5Wheelh+0x34>
    WheelPos -= 85;
 80a0174:	3855      	subs	r0, #85	; 0x55
 80a0176:	b2c0      	uxtb	r0, r0
    return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
 80a0178:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80a017c:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
 80a0180:	3801      	subs	r0, #1
 80a0182:	b2d2      	uxtb	r2, r2
 80a0184:	2100      	movs	r1, #0
 80a0186:	b2c0      	uxtb	r0, r0
 80a0188:	f001 b9eb 	b.w	80a1562 <_ZN17Adafruit_NeoPixel5ColorEhhh>
  } else {
    WheelPos -= 170;
 80a018c:	3056      	adds	r0, #86	; 0x56
 80a018e:	b2c1      	uxtb	r1, r0
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
 80a0190:	eba1 0281 	sub.w	r2, r1, r1, lsl #2
 80a0194:	3a01      	subs	r2, #1
 80a0196:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a019a:	b2d2      	uxtb	r2, r2
 80a019c:	b2c9      	uxtb	r1, r1
 80a019e:	2000      	movs	r0, #0
 80a01a0:	f001 b9df 	b.w	80a1562 <_ZN17Adafruit_NeoPixel5ColorEhhh>

080a01a4 <_Z7rainbowh>:
    strip.setPixelColor(i, RGB_COLOR_MAGENTA);
  }
  return 0;
}

void rainbow(uint8_t wait) {
 80a01a4:	b570      	push	{r4, r5, r6, lr}
 80a01a6:	4606      	mov	r6, r0
  uint16_t i, j;
  for (j = 0; j < 256; j++) {
 80a01a8:	2500      	movs	r5, #0
 80a01aa:	2400      	movs	r4, #0
    for (i = 0; i < strip.numPixels(); i++) {
 80a01ac:	480e      	ldr	r0, [pc, #56]	; (80a01e8 <_Z7rainbowh+0x44>)
 80a01ae:	f001 f9dd 	bl	80a156c <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a01b2:	4284      	cmp	r4, r0
 80a01b4:	d20b      	bcs.n	80a01ce <_Z7rainbowh+0x2a>
      strip.setPixelColor(i, Wheel((i + j) & 255));
 80a01b6:	1960      	adds	r0, r4, r5
 80a01b8:	b2c0      	uxtb	r0, r0
 80a01ba:	f7ff ffcd 	bl	80a0158 <_Z5Wheelh>
 80a01be:	4621      	mov	r1, r4
 80a01c0:	4602      	mov	r2, r0
}

void rainbow(uint8_t wait) {
  uint16_t i, j;
  for (j = 0; j < 256; j++) {
    for (i = 0; i < strip.numPixels(); i++) {
 80a01c2:	3401      	adds	r4, #1
      strip.setPixelColor(i, Wheel((i + j) & 255));
 80a01c4:	4808      	ldr	r0, [pc, #32]	; (80a01e8 <_Z7rainbowh+0x44>)
 80a01c6:	f001 f981 	bl	80a14cc <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
}

void rainbow(uint8_t wait) {
  uint16_t i, j;
  for (j = 0; j < 256; j++) {
    for (i = 0; i < strip.numPixels(); i++) {
 80a01ca:	b2a4      	uxth	r4, r4
 80a01cc:	e7ee      	b.n	80a01ac <_Z7rainbowh+0x8>
      strip.setPixelColor(i, Wheel((i + j) & 255));
    }
    strip.show();
 80a01ce:	4806      	ldr	r0, [pc, #24]	; (80a01e8 <_Z7rainbowh+0x44>)
  return 0;
}

void rainbow(uint8_t wait) {
  uint16_t i, j;
  for (j = 0; j < 256; j++) {
 80a01d0:	3501      	adds	r5, #1
    for (i = 0; i < strip.numPixels(); i++) {
      strip.setPixelColor(i, Wheel((i + j) & 255));
    }
    strip.show();
 80a01d2:	f000 f8c1 	bl	80a0358 <_ZN17Adafruit_NeoPixel4showEv>
  return 0;
}

void rainbow(uint8_t wait) {
  uint16_t i, j;
  for (j = 0; j < 256; j++) {
 80a01d6:	b2ad      	uxth	r5, r5
    for (i = 0; i < strip.numPixels(); i++) {
      strip.setPixelColor(i, Wheel((i + j) & 255));
    }
    strip.show();
    delay(wait);
 80a01d8:	4630      	mov	r0, r6
 80a01da:	f001 fb57 	bl	80a188c <delay>
  return 0;
}

void rainbow(uint8_t wait) {
  uint16_t i, j;
  for (j = 0; j < 256; j++) {
 80a01de:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80a01e2:	d1e2      	bne.n	80a01aa <_Z7rainbowh+0x6>
      strip.setPixelColor(i, Wheel((i + j) & 255));
    }
    strip.show();
    delay(wait);
  }
}
 80a01e4:	bd70      	pop	{r4, r5, r6, pc}
 80a01e6:	bf00      	nop
 80a01e8:	20000374 	.word	0x20000374

080a01ec <_Z14defaultRoutine6String>:
int setBrightness(String input) {
  brightness = input.toInt();
  return 0;
}

int defaultRoutine(String input) {
 80a01ec:	b508      	push	{r3, lr}
  rainbow(20);
 80a01ee:	2014      	movs	r0, #20
 80a01f0:	f7ff ffd8 	bl	80a01a4 <_Z7rainbowh>
  return 0;
}
 80a01f4:	2000      	movs	r0, #0
 80a01f6:	bd08      	pop	{r3, pc}

080a01f8 <loop>:
  Particle.function("setBrightness", setBrightness);
  Particle.function("notifyOnCall", notifyOnCall);
  Particle.function("defaultRoutine", defaultRoutine);
}

void loop() {
 80a01f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  strip.setBrightness(brightness);
 80a01fa:	4b09      	ldr	r3, [pc, #36]	; (80a0220 <loop+0x28>)
 80a01fc:	4809      	ldr	r0, [pc, #36]	; (80a0224 <loop+0x2c>)
 80a01fe:	7819      	ldrb	r1, [r3, #0]
 80a0200:	f001 f9b6 	bl	80a1570 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  defaultRoutine("");
 80a0204:	4908      	ldr	r1, [pc, #32]	; (80a0228 <loop+0x30>)
 80a0206:	4668      	mov	r0, sp
 80a0208:	f001 fccc 	bl	80a1ba4 <_ZN6StringC1EPK19__FlashStringHelper>
  brightness = input.toInt();
  return 0;
}

int defaultRoutine(String input) {
  rainbow(20);
 80a020c:	2014      	movs	r0, #20
 80a020e:	f7ff ffc9 	bl	80a01a4 <_Z7rainbowh>
  Particle.function("defaultRoutine", defaultRoutine);
}

void loop() {
  strip.setBrightness(brightness);
  defaultRoutine("");
 80a0212:	4668      	mov	r0, sp
 80a0214:	f001 fc7f 	bl	80a1b16 <_ZN6StringD1Ev>
}
 80a0218:	b005      	add	sp, #20
 80a021a:	f85d fb04 	ldr.w	pc, [sp], #4
 80a021e:	bf00      	nop
 80a0220:	20000300 	.word	0x20000300
 80a0224:	20000374 	.word	0x20000374
 80a0228:	080a266a 	.word	0x080a266a

080a022c <_GLOBAL__sub_I_SystemMode>:
    return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  } else {
    WheelPos -= 170;
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
}
 80a022c:	b537      	push	{r0, r1, r2, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a022e:	f001 f9f7 	bl	80a1620 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0232:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a0236:	4c13      	ldr	r4, [pc, #76]	; (80a0284 <_GLOBAL__sub_I_SystemMode+0x58>)
 80a0238:	2500      	movs	r5, #0
 80a023a:	8063      	strh	r3, [r4, #2]
 80a023c:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0240:	2001      	movs	r0, #1
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0242:	80a3      	strh	r3, [r4, #4]
 80a0244:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0246:	f001 fac5 	bl	80a17d4 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80a024a:	a802      	add	r0, sp, #8
 80a024c:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a0250:	462a      	mov	r2, r5
 80a0252:	4629      	mov	r1, r5
 80a0254:	f001 f9c4 	bl	80a15e0 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80a0258:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 80a025a:	2b1e      	cmp	r3, #30
 80a025c:	d104      	bne.n	80a0268 <_GLOBAL__sub_I_SystemMode+0x3c>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 80a025e:	2303      	movs	r3, #3
 80a0260:	7023      	strb	r3, [r4, #0]
 80a0262:	2311      	movs	r3, #17
 80a0264:	8065      	strh	r5, [r4, #2]
 80a0266:	80a3      	strh	r3, [r4, #4]

#define PIXEL_PIN D5
#define PIXEL_COUNT 99
#define PIXEL_TYPE WS2811

Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
 80a0268:	2300      	movs	r3, #0
 80a026a:	2205      	movs	r2, #5
 80a026c:	2163      	movs	r1, #99	; 0x63
 80a026e:	4806      	ldr	r0, [pc, #24]	; (80a0288 <_GLOBAL__sub_I_SystemMode+0x5c>)
 80a0270:	f000 f861 	bl	80a0336 <_ZN17Adafruit_NeoPixelC1Ethh>
 80a0274:	4a05      	ldr	r2, [pc, #20]	; (80a028c <_GLOBAL__sub_I_SystemMode+0x60>)
 80a0276:	4906      	ldr	r1, [pc, #24]	; (80a0290 <_GLOBAL__sub_I_SystemMode+0x64>)
 80a0278:	4803      	ldr	r0, [pc, #12]	; (80a0288 <_GLOBAL__sub_I_SystemMode+0x5c>)
 80a027a:	f001 ff69 	bl	80a2150 <__aeabi_atexit>
    return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  } else {
    WheelPos -= 170;
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
}
 80a027e:	b003      	add	sp, #12
 80a0280:	bd30      	pop	{r4, r5, pc}
 80a0282:	bf00      	nop
 80a0284:	20000388 	.word	0x20000388
 80a0288:	20000374 	.word	0x20000374
 80a028c:	20000370 	.word	0x20000370
 80a0290:	080a0299 	.word	0x080a0299

080a0294 <micros>:

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0294:	f001 b9b4 	b.w	80a1600 <HAL_Timer_Get_Micro_Seconds>

080a0298 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a0298:	b510      	push	{r4, lr}
 80a029a:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a029c:	68c0      	ldr	r0, [r0, #12]
 80a029e:	b108      	cbz	r0, 80a02a4 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a02a0:	f001 fae4 	bl	80a186c <free>
  if (begun) pinMode(pin, INPUT);
 80a02a4:	7823      	ldrb	r3, [r4, #0]
 80a02a6:	b11b      	cbz	r3, 80a02b0 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a02a8:	2100      	movs	r1, #0
 80a02aa:	79e0      	ldrb	r0, [r4, #7]
 80a02ac:	f001 fecc 	bl	80a2048 <pinMode>
}
 80a02b0:	4620      	mov	r0, r4
 80a02b2:	bd10      	pop	{r4, pc}

080a02b4 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a02b4:	b538      	push	{r3, r4, r5, lr}
 80a02b6:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a02b8:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a02ba:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a02bc:	b108      	cbz	r0, 80a02c2 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a02be:	f001 fad5 	bl	80a186c <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a02c2:	79a3      	ldrb	r3, [r4, #6]
 80a02c4:	2b06      	cmp	r3, #6
 80a02c6:	bf0c      	ite	eq
 80a02c8:	2004      	moveq	r0, #4
 80a02ca:	2003      	movne	r0, #3
 80a02cc:	4368      	muls	r0, r5
 80a02ce:	b280      	uxth	r0, r0
 80a02d0:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a02d2:	f001 fac3 	bl	80a185c <malloc>
 80a02d6:	60e0      	str	r0, [r4, #12]
 80a02d8:	b128      	cbz	r0, 80a02e6 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a02da:	88a2      	ldrh	r2, [r4, #4]
 80a02dc:	2100      	movs	r1, #0
 80a02de:	f002 f8a2 	bl	80a2426 <memset>
    numLEDs = n;
 80a02e2:	8065      	strh	r5, [r4, #2]
 80a02e4:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a02e6:	80a0      	strh	r0, [r4, #4]
 80a02e8:	8060      	strh	r0, [r4, #2]
 80a02ea:	bd38      	pop	{r3, r4, r5, pc}

080a02ec <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a02ec:	b510      	push	{r4, lr}
 80a02ee:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a02f0:	2101      	movs	r1, #1
 80a02f2:	79c0      	ldrb	r0, [r0, #7]
 80a02f4:	f001 fea8 	bl	80a2048 <pinMode>
  digitalWrite(pin, LOW);
 80a02f8:	2100      	movs	r1, #0
 80a02fa:	79e0      	ldrb	r0, [r4, #7]
 80a02fc:	f001 feb5 	bl	80a206a <digitalWrite>
  begun = true;
 80a0300:	2301      	movs	r3, #1
 80a0302:	7023      	strb	r3, [r4, #0]
 80a0304:	bd10      	pop	{r4, pc}

080a0306 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0306:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a0308:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a030a:	4605      	mov	r5, r0
 80a030c:	460c      	mov	r4, r1
    if (begun) {
 80a030e:	b11b      	cbz	r3, 80a0318 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a0310:	2100      	movs	r1, #0
 80a0312:	79c0      	ldrb	r0, [r0, #7]
 80a0314:	f001 fe98 	bl	80a2048 <pinMode>
    }
    pin = p;
    if (begun) {
 80a0318:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a031a:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a031c:	b153      	cbz	r3, 80a0334 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a031e:	b2a4      	uxth	r4, r4
 80a0320:	4620      	mov	r0, r4
 80a0322:	2101      	movs	r1, #1
 80a0324:	f001 fe90 	bl	80a2048 <pinMode>
        digitalWrite(p, LOW);
 80a0328:	4620      	mov	r0, r4
    }
}
 80a032a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a032e:	2100      	movs	r1, #0
 80a0330:	f001 be9b 	b.w	80a206a <digitalWrite>
 80a0334:	bd38      	pop	{r3, r4, r5, pc}

080a0336 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a0336:	b570      	push	{r4, r5, r6, lr}
 80a0338:	4604      	mov	r4, r0
 80a033a:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a033c:	2500      	movs	r5, #0
 80a033e:	7183      	strb	r3, [r0, #6]
 80a0340:	7005      	strb	r5, [r0, #0]
 80a0342:	7205      	strb	r5, [r0, #8]
 80a0344:	60c5      	str	r5, [r0, #12]
 80a0346:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a0348:	f7ff ffb4 	bl	80a02b4 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a034c:	4620      	mov	r0, r4
 80a034e:	4631      	mov	r1, r6
 80a0350:	f7ff ffd9 	bl	80a0306 <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a0354:	4620      	mov	r0, r4
 80a0356:	bd70      	pop	{r4, r5, r6, pc}

080a0358 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a0358:	68c3      	ldr	r3, [r0, #12]
 80a035a:	2b00      	cmp	r3, #0
 80a035c:	f000 858e 	beq.w	80a0e7c <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a0360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0364:	4604      	mov	r4, r0
 80a0366:	7983      	ldrb	r3, [r0, #6]
 80a0368:	b086      	sub	sp, #24
 80a036a:	3b02      	subs	r3, #2
 80a036c:	b2db      	uxtb	r3, r3
 80a036e:	2b04      	cmp	r3, #4
 80a0370:	bf96      	itet	ls
 80a0372:	4a29      	ldrls	r2, [pc, #164]	; (80a0418 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a0374:	2532      	movhi	r5, #50	; 0x32
 80a0376:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a037a:	f7ff ff8b 	bl	80a0294 <micros>
 80a037e:	6923      	ldr	r3, [r4, #16]
 80a0380:	1ac0      	subs	r0, r0, r3
 80a0382:	42a8      	cmp	r0, r5
 80a0384:	d3f9      	bcc.n	80a037a <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a0386:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0388:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a038a:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a038c:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a038e:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a0392:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0396:	f000 8272 	beq.w	80a087e <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a039a:	2907      	cmp	r1, #7
 80a039c:	f000 826f 	beq.w	80a087e <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a03a0:	2906      	cmp	r1, #6
 80a03a2:	f000 8432 	beq.w	80a0c0a <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a03a6:	2905      	cmp	r1, #5
 80a03a8:	f000 83ab 	beq.w	80a0b02 <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a03ac:	2908      	cmp	r1, #8
 80a03ae:	f000 83a8 	beq.w	80a0b02 <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a03b2:	2900      	cmp	r1, #0
 80a03b4:	f040 8563 	bne.w	80a0e7e <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a03b8:	4a18      	ldr	r2, [pc, #96]	; (80a041c <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a03ba:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a03be:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a03c2:	b29b      	uxth	r3, r3
 80a03c4:	2b00      	cmp	r3, #0
 80a03c6:	f000 8395 	beq.w	80a0af4 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a03ca:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a03cc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a03d0:	f10e 0503 	add.w	r5, lr, #3
 80a03d4:	3b03      	subs	r3, #3
 80a03d6:	b29b      	uxth	r3, r3
 80a03d8:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a03dc:	f89e 3000 	ldrb.w	r3, [lr]
 80a03e0:	b2db      	uxtb	r3, r3
 80a03e2:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a03e6:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a03ea:	b2db      	uxtb	r3, r3
 80a03ec:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a03f0:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a03f4:	b2db      	uxtb	r3, r3
 80a03f6:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a03fa:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a03fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0402:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0406:	021b      	lsls	r3, r3, #8
 80a0408:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a040c:	4303      	orrs	r3, r0
 80a040e:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0410:	f88d 1005 	strb.w	r1, [sp, #5]
 80a0414:	e11b      	b.n	80a064e <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a0416:	bf00      	nop
 80a0418:	080a2604 	.word	0x080a2604
 80a041c:	20000390 	.word	0x20000390
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0420:	4600      	mov	r0, r0
 80a0422:	bf00      	nop
 80a0424:	bf00      	nop
 80a0426:	bf00      	nop
 80a0428:	bf00      	nop
 80a042a:	bf00      	nop
 80a042c:	bf00      	nop
 80a042e:	bf00      	nop
 80a0430:	bf00      	nop
 80a0432:	bf00      	nop
 80a0434:	bf00      	nop
 80a0436:	bf00      	nop
 80a0438:	bf00      	nop
 80a043a:	bf00      	nop
 80a043c:	bf00      	nop
 80a043e:	bf00      	nop
 80a0440:	bf00      	nop
 80a0442:	bf00      	nop
 80a0444:	bf00      	nop
 80a0446:	bf00      	nop
 80a0448:	bf00      	nop
 80a044a:	bf00      	nop
 80a044c:	bf00      	nop
 80a044e:	bf00      	nop
 80a0450:	bf00      	nop
 80a0452:	bf00      	nop
 80a0454:	bf00      	nop
 80a0456:	bf00      	nop
 80a0458:	bf00      	nop
 80a045a:	bf00      	nop
 80a045c:	bf00      	nop
 80a045e:	bf00      	nop
 80a0460:	bf00      	nop
 80a0462:	bf00      	nop
 80a0464:	bf00      	nop
 80a0466:	bf00      	nop
 80a0468:	bf00      	nop
 80a046a:	bf00      	nop
 80a046c:	bf00      	nop
 80a046e:	bf00      	nop
 80a0470:	bf00      	nop
 80a0472:	bf00      	nop
 80a0474:	bf00      	nop
 80a0476:	bf00      	nop
 80a0478:	bf00      	nop
 80a047a:	bf00      	nop
 80a047c:	bf00      	nop
 80a047e:	bf00      	nop
 80a0480:	bf00      	nop
 80a0482:	bf00      	nop
 80a0484:	bf00      	nop
 80a0486:	bf00      	nop
 80a0488:	bf00      	nop
 80a048a:	bf00      	nop
 80a048c:	bf00      	nop
 80a048e:	bf00      	nop
 80a0490:	bf00      	nop
 80a0492:	bf00      	nop
 80a0494:	bf00      	nop
 80a0496:	bf00      	nop
 80a0498:	bf00      	nop
 80a049a:	bf00      	nop
 80a049c:	bf00      	nop
 80a049e:	bf00      	nop
 80a04a0:	bf00      	nop
 80a04a2:	bf00      	nop
 80a04a4:	bf00      	nop
 80a04a6:	bf00      	nop
 80a04a8:	bf00      	nop
 80a04aa:	bf00      	nop
 80a04ac:	bf00      	nop
 80a04ae:	bf00      	nop
 80a04b0:	bf00      	nop
 80a04b2:	bf00      	nop
 80a04b4:	bf00      	nop
 80a04b6:	bf00      	nop
 80a04b8:	bf00      	nop
 80a04ba:	bf00      	nop
 80a04bc:	bf00      	nop
 80a04be:	bf00      	nop
 80a04c0:	bf00      	nop
 80a04c2:	bf00      	nop
 80a04c4:	bf00      	nop
 80a04c6:	bf00      	nop
 80a04c8:	bf00      	nop
 80a04ca:	bf00      	nop
 80a04cc:	bf00      	nop
 80a04ce:	bf00      	nop
 80a04d0:	bf00      	nop
 80a04d2:	bf00      	nop
 80a04d4:	bf00      	nop
 80a04d6:	bf00      	nop
 80a04d8:	bf00      	nop
 80a04da:	bf00      	nop
 80a04dc:	bf00      	nop
 80a04de:	bf00      	nop
 80a04e0:	bf00      	nop
 80a04e2:	bf00      	nop
 80a04e4:	bf00      	nop
 80a04e6:	bf00      	nop
 80a04e8:	bf00      	nop
 80a04ea:	bf00      	nop
 80a04ec:	bf00      	nop
 80a04ee:	bf00      	nop
 80a04f0:	bf00      	nop
 80a04f2:	bf00      	nop
 80a04f4:	bf00      	nop
 80a04f6:	bf00      	nop
 80a04f8:	bf00      	nop
 80a04fa:	bf00      	nop
 80a04fc:	bf00      	nop
 80a04fe:	bf00      	nop
 80a0500:	bf00      	nop
 80a0502:	bf00      	nop
 80a0504:	bf00      	nop
 80a0506:	bf00      	nop
 80a0508:	bf00      	nop
 80a050a:	bf00      	nop
 80a050c:	bf00      	nop
 80a050e:	bf00      	nop
 80a0510:	bf00      	nop
 80a0512:	bf00      	nop
 80a0514:	bf00      	nop
 80a0516:	bf00      	nop
 80a0518:	bf00      	nop
 80a051a:	bf00      	nop
 80a051c:	bf00      	nop
 80a051e:	bf00      	nop
 80a0520:	bf00      	nop
 80a0522:	bf00      	nop
 80a0524:	bf00      	nop
 80a0526:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a0528:	79e3      	ldrb	r3, [r4, #7]
 80a052a:	6810      	ldr	r0, [r2, #0]
 80a052c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0530:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0534:	88bf      	ldrh	r7, [r7, #4]
 80a0536:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a053a:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a053c:	4600      	mov	r0, r0
 80a053e:	bf00      	nop
 80a0540:	bf00      	nop
 80a0542:	bf00      	nop
 80a0544:	bf00      	nop
 80a0546:	bf00      	nop
 80a0548:	bf00      	nop
 80a054a:	bf00      	nop
 80a054c:	bf00      	nop
 80a054e:	bf00      	nop
 80a0550:	bf00      	nop
 80a0552:	bf00      	nop
 80a0554:	bf00      	nop
 80a0556:	bf00      	nop
 80a0558:	bf00      	nop
 80a055a:	bf00      	nop
 80a055c:	bf00      	nop
 80a055e:	bf00      	nop
 80a0560:	bf00      	nop
 80a0562:	bf00      	nop
 80a0564:	bf00      	nop
 80a0566:	bf00      	nop
 80a0568:	bf00      	nop
 80a056a:	bf00      	nop
 80a056c:	bf00      	nop
 80a056e:	bf00      	nop
 80a0570:	bf00      	nop
 80a0572:	bf00      	nop
 80a0574:	bf00      	nop
 80a0576:	bf00      	nop
 80a0578:	bf00      	nop
 80a057a:	bf00      	nop
 80a057c:	bf00      	nop
 80a057e:	bf00      	nop
 80a0580:	bf00      	nop
 80a0582:	bf00      	nop
 80a0584:	bf00      	nop
 80a0586:	bf00      	nop
 80a0588:	bf00      	nop
 80a058a:	bf00      	nop
 80a058c:	bf00      	nop
 80a058e:	bf00      	nop
 80a0590:	bf00      	nop
 80a0592:	bf00      	nop
 80a0594:	bf00      	nop
 80a0596:	bf00      	nop
 80a0598:	bf00      	nop
 80a059a:	bf00      	nop
 80a059c:	bf00      	nop
 80a059e:	bf00      	nop
 80a05a0:	bf00      	nop
 80a05a2:	bf00      	nop
 80a05a4:	bf00      	nop
 80a05a6:	bf00      	nop
 80a05a8:	bf00      	nop
 80a05aa:	bf00      	nop
 80a05ac:	bf00      	nop
 80a05ae:	bf00      	nop
 80a05b0:	bf00      	nop
 80a05b2:	bf00      	nop
 80a05b4:	bf00      	nop
 80a05b6:	bf00      	nop
 80a05b8:	bf00      	nop
 80a05ba:	bf00      	nop
 80a05bc:	bf00      	nop
 80a05be:	bf00      	nop
 80a05c0:	bf00      	nop
 80a05c2:	bf00      	nop
 80a05c4:	bf00      	nop
 80a05c6:	bf00      	nop
 80a05c8:	bf00      	nop
 80a05ca:	bf00      	nop
 80a05cc:	bf00      	nop
 80a05ce:	bf00      	nop
 80a05d0:	bf00      	nop
 80a05d2:	bf00      	nop
 80a05d4:	bf00      	nop
 80a05d6:	bf00      	nop
 80a05d8:	bf00      	nop
 80a05da:	bf00      	nop
 80a05dc:	bf00      	nop
 80a05de:	bf00      	nop
 80a05e0:	bf00      	nop
 80a05e2:	bf00      	nop
 80a05e4:	bf00      	nop
 80a05e6:	bf00      	nop
 80a05e8:	bf00      	nop
 80a05ea:	bf00      	nop
 80a05ec:	bf00      	nop
 80a05ee:	bf00      	nop
 80a05f0:	bf00      	nop
 80a05f2:	bf00      	nop
 80a05f4:	bf00      	nop
 80a05f6:	bf00      	nop
 80a05f8:	bf00      	nop
 80a05fa:	bf00      	nop
 80a05fc:	bf00      	nop
 80a05fe:	bf00      	nop
 80a0600:	bf00      	nop
 80a0602:	bf00      	nop
 80a0604:	bf00      	nop
 80a0606:	bf00      	nop
 80a0608:	bf00      	nop
 80a060a:	bf00      	nop
 80a060c:	bf00      	nop
 80a060e:	bf00      	nop
 80a0610:	bf00      	nop
 80a0612:	bf00      	nop
 80a0614:	bf00      	nop
 80a0616:	bf00      	nop
 80a0618:	bf00      	nop
 80a061a:	bf00      	nop
 80a061c:	bf00      	nop
 80a061e:	bf00      	nop
 80a0620:	bf00      	nop
 80a0622:	bf00      	nop
 80a0624:	bf00      	nop
 80a0626:	bf00      	nop
 80a0628:	bf00      	nop
 80a062a:	bf00      	nop
 80a062c:	bf00      	nop
 80a062e:	bf00      	nop
 80a0630:	bf00      	nop
 80a0632:	bf00      	nop
 80a0634:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0636:	9b04      	ldr	r3, [sp, #16]
 80a0638:	085b      	lsrs	r3, r3, #1
 80a063a:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a063c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0640:	3301      	adds	r3, #1
 80a0642:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0644:	2b17      	cmp	r3, #23
 80a0646:	f88d 3005 	strb.w	r3, [sp, #5]
 80a064a:	f200 82db 	bhi.w	80a0c04 <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a064e:	79e3      	ldrb	r3, [r4, #7]
 80a0650:	6810      	ldr	r0, [r2, #0]
 80a0652:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0656:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a065a:	88bf      	ldrh	r7, [r7, #4]
 80a065c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0660:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0662:	9803      	ldr	r0, [sp, #12]
 80a0664:	9b04      	ldr	r3, [sp, #16]
 80a0666:	4218      	tst	r0, r3
 80a0668:	f47f aeda 	bne.w	80a0420 <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a066c:	4600      	mov	r0, r0
 80a066e:	bf00      	nop
 80a0670:	bf00      	nop
 80a0672:	bf00      	nop
 80a0674:	bf00      	nop
 80a0676:	bf00      	nop
 80a0678:	bf00      	nop
 80a067a:	bf00      	nop
 80a067c:	bf00      	nop
 80a067e:	bf00      	nop
 80a0680:	bf00      	nop
 80a0682:	bf00      	nop
 80a0684:	bf00      	nop
 80a0686:	bf00      	nop
 80a0688:	bf00      	nop
 80a068a:	bf00      	nop
 80a068c:	bf00      	nop
 80a068e:	bf00      	nop
 80a0690:	bf00      	nop
 80a0692:	bf00      	nop
 80a0694:	bf00      	nop
 80a0696:	bf00      	nop
 80a0698:	bf00      	nop
 80a069a:	bf00      	nop
 80a069c:	bf00      	nop
 80a069e:	bf00      	nop
 80a06a0:	bf00      	nop
 80a06a2:	bf00      	nop
 80a06a4:	bf00      	nop
 80a06a6:	bf00      	nop
 80a06a8:	bf00      	nop
 80a06aa:	bf00      	nop
 80a06ac:	bf00      	nop
 80a06ae:	bf00      	nop
 80a06b0:	bf00      	nop
 80a06b2:	bf00      	nop
 80a06b4:	bf00      	nop
 80a06b6:	bf00      	nop
 80a06b8:	bf00      	nop
 80a06ba:	bf00      	nop
 80a06bc:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a06be:	79e3      	ldrb	r3, [r4, #7]
 80a06c0:	6810      	ldr	r0, [r2, #0]
 80a06c2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a06c6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a06ca:	88bf      	ldrh	r7, [r7, #4]
 80a06cc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a06d0:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a06d2:	4600      	mov	r0, r0
 80a06d4:	bf00      	nop
 80a06d6:	bf00      	nop
 80a06d8:	bf00      	nop
 80a06da:	bf00      	nop
 80a06dc:	bf00      	nop
 80a06de:	bf00      	nop
 80a06e0:	bf00      	nop
 80a06e2:	bf00      	nop
 80a06e4:	bf00      	nop
 80a06e6:	bf00      	nop
 80a06e8:	bf00      	nop
 80a06ea:	bf00      	nop
 80a06ec:	bf00      	nop
 80a06ee:	bf00      	nop
 80a06f0:	bf00      	nop
 80a06f2:	bf00      	nop
 80a06f4:	bf00      	nop
 80a06f6:	bf00      	nop
 80a06f8:	bf00      	nop
 80a06fa:	bf00      	nop
 80a06fc:	bf00      	nop
 80a06fe:	bf00      	nop
 80a0700:	bf00      	nop
 80a0702:	bf00      	nop
 80a0704:	bf00      	nop
 80a0706:	bf00      	nop
 80a0708:	bf00      	nop
 80a070a:	bf00      	nop
 80a070c:	bf00      	nop
 80a070e:	bf00      	nop
 80a0710:	bf00      	nop
 80a0712:	bf00      	nop
 80a0714:	bf00      	nop
 80a0716:	bf00      	nop
 80a0718:	bf00      	nop
 80a071a:	bf00      	nop
 80a071c:	bf00      	nop
 80a071e:	bf00      	nop
 80a0720:	bf00      	nop
 80a0722:	bf00      	nop
 80a0724:	bf00      	nop
 80a0726:	bf00      	nop
 80a0728:	bf00      	nop
 80a072a:	bf00      	nop
 80a072c:	bf00      	nop
 80a072e:	bf00      	nop
 80a0730:	bf00      	nop
 80a0732:	bf00      	nop
 80a0734:	bf00      	nop
 80a0736:	bf00      	nop
 80a0738:	bf00      	nop
 80a073a:	bf00      	nop
 80a073c:	bf00      	nop
 80a073e:	bf00      	nop
 80a0740:	bf00      	nop
 80a0742:	bf00      	nop
 80a0744:	bf00      	nop
 80a0746:	bf00      	nop
 80a0748:	bf00      	nop
 80a074a:	bf00      	nop
 80a074c:	bf00      	nop
 80a074e:	bf00      	nop
 80a0750:	bf00      	nop
 80a0752:	bf00      	nop
 80a0754:	bf00      	nop
 80a0756:	bf00      	nop
 80a0758:	bf00      	nop
 80a075a:	bf00      	nop
 80a075c:	bf00      	nop
 80a075e:	bf00      	nop
 80a0760:	bf00      	nop
 80a0762:	bf00      	nop
 80a0764:	bf00      	nop
 80a0766:	bf00      	nop
 80a0768:	bf00      	nop
 80a076a:	bf00      	nop
 80a076c:	bf00      	nop
 80a076e:	bf00      	nop
 80a0770:	bf00      	nop
 80a0772:	bf00      	nop
 80a0774:	bf00      	nop
 80a0776:	bf00      	nop
 80a0778:	bf00      	nop
 80a077a:	bf00      	nop
 80a077c:	bf00      	nop
 80a077e:	bf00      	nop
 80a0780:	bf00      	nop
 80a0782:	bf00      	nop
 80a0784:	bf00      	nop
 80a0786:	bf00      	nop
 80a0788:	bf00      	nop
 80a078a:	bf00      	nop
 80a078c:	bf00      	nop
 80a078e:	bf00      	nop
 80a0790:	bf00      	nop
 80a0792:	bf00      	nop
 80a0794:	bf00      	nop
 80a0796:	bf00      	nop
 80a0798:	bf00      	nop
 80a079a:	bf00      	nop
 80a079c:	bf00      	nop
 80a079e:	bf00      	nop
 80a07a0:	bf00      	nop
 80a07a2:	bf00      	nop
 80a07a4:	bf00      	nop
 80a07a6:	bf00      	nop
 80a07a8:	bf00      	nop
 80a07aa:	bf00      	nop
 80a07ac:	bf00      	nop
 80a07ae:	bf00      	nop
 80a07b0:	bf00      	nop
 80a07b2:	bf00      	nop
 80a07b4:	bf00      	nop
 80a07b6:	bf00      	nop
 80a07b8:	bf00      	nop
 80a07ba:	bf00      	nop
 80a07bc:	bf00      	nop
 80a07be:	bf00      	nop
 80a07c0:	bf00      	nop
 80a07c2:	bf00      	nop
 80a07c4:	bf00      	nop
 80a07c6:	bf00      	nop
 80a07c8:	bf00      	nop
 80a07ca:	bf00      	nop
 80a07cc:	bf00      	nop
 80a07ce:	bf00      	nop
 80a07d0:	bf00      	nop
 80a07d2:	bf00      	nop
 80a07d4:	bf00      	nop
 80a07d6:	bf00      	nop
 80a07d8:	bf00      	nop
 80a07da:	bf00      	nop
 80a07dc:	bf00      	nop
 80a07de:	bf00      	nop
 80a07e0:	bf00      	nop
 80a07e2:	bf00      	nop
 80a07e4:	bf00      	nop
 80a07e6:	bf00      	nop
 80a07e8:	bf00      	nop
 80a07ea:	bf00      	nop
 80a07ec:	bf00      	nop
 80a07ee:	bf00      	nop
 80a07f0:	bf00      	nop
 80a07f2:	bf00      	nop
 80a07f4:	bf00      	nop
 80a07f6:	bf00      	nop
 80a07f8:	bf00      	nop
 80a07fa:	bf00      	nop
 80a07fc:	bf00      	nop
 80a07fe:	bf00      	nop
 80a0800:	bf00      	nop
 80a0802:	bf00      	nop
 80a0804:	bf00      	nop
 80a0806:	bf00      	nop
 80a0808:	bf00      	nop
 80a080a:	bf00      	nop
 80a080c:	bf00      	nop
 80a080e:	bf00      	nop
 80a0810:	bf00      	nop
 80a0812:	bf00      	nop
 80a0814:	bf00      	nop
 80a0816:	bf00      	nop
 80a0818:	bf00      	nop
 80a081a:	bf00      	nop
 80a081c:	bf00      	nop
 80a081e:	bf00      	nop
 80a0820:	bf00      	nop
 80a0822:	bf00      	nop
 80a0824:	bf00      	nop
 80a0826:	bf00      	nop
 80a0828:	bf00      	nop
 80a082a:	bf00      	nop
 80a082c:	bf00      	nop
 80a082e:	bf00      	nop
 80a0830:	bf00      	nop
 80a0832:	bf00      	nop
 80a0834:	bf00      	nop
 80a0836:	bf00      	nop
 80a0838:	bf00      	nop
 80a083a:	bf00      	nop
 80a083c:	bf00      	nop
 80a083e:	bf00      	nop
 80a0840:	bf00      	nop
 80a0842:	bf00      	nop
 80a0844:	bf00      	nop
 80a0846:	bf00      	nop
 80a0848:	bf00      	nop
 80a084a:	bf00      	nop
 80a084c:	bf00      	nop
 80a084e:	bf00      	nop
 80a0850:	bf00      	nop
 80a0852:	bf00      	nop
 80a0854:	bf00      	nop
 80a0856:	bf00      	nop
 80a0858:	bf00      	nop
 80a085a:	bf00      	nop
 80a085c:	bf00      	nop
 80a085e:	bf00      	nop
 80a0860:	bf00      	nop
 80a0862:	bf00      	nop
 80a0864:	bf00      	nop
 80a0866:	bf00      	nop
 80a0868:	bf00      	nop
 80a086a:	bf00      	nop
 80a086c:	bf00      	nop
 80a086e:	bf00      	nop
 80a0870:	bf00      	nop
 80a0872:	bf00      	nop
 80a0874:	bf00      	nop
 80a0876:	bf00      	nop
 80a0878:	bf00      	nop
 80a087a:	bf00      	nop
 80a087c:	e6db      	b.n	80a0636 <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a087e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0882:	4a17      	ldr	r2, [pc, #92]	; (80a08e0 <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a0884:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a0886:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a088a:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a088c:	2b00      	cmp	r3, #0
 80a088e:	f000 8131 	beq.w	80a0af4 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0892:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0894:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0898:	f10e 0103 	add.w	r1, lr, #3
 80a089c:	3b03      	subs	r3, #3
 80a089e:	b29b      	uxth	r3, r3
 80a08a0:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a08a4:	f89e 3000 	ldrb.w	r3, [lr]
 80a08a8:	b2db      	uxtb	r3, r3
 80a08aa:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a08ae:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a08b2:	b2db      	uxtb	r3, r3
 80a08b4:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a08b8:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a08bc:	b2db      	uxtb	r3, r3
 80a08be:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a08c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a08c6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a08ca:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a08ce:	0200      	lsls	r0, r0, #8
 80a08d0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a08d4:	433b      	orrs	r3, r7
 80a08d6:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a08d8:	f88d 6005 	strb.w	r6, [sp, #5]
 80a08dc:	e080      	b.n	80a09e0 <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a08de:	bf00      	nop
 80a08e0:	20000390 	.word	0x20000390
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a08e4:	4600      	mov	r0, r0
 80a08e6:	bf00      	nop
 80a08e8:	bf00      	nop
 80a08ea:	bf00      	nop
 80a08ec:	bf00      	nop
 80a08ee:	bf00      	nop
 80a08f0:	bf00      	nop
 80a08f2:	bf00      	nop
 80a08f4:	bf00      	nop
 80a08f6:	bf00      	nop
 80a08f8:	bf00      	nop
 80a08fa:	bf00      	nop
 80a08fc:	bf00      	nop
 80a08fe:	bf00      	nop
 80a0900:	bf00      	nop
 80a0902:	bf00      	nop
 80a0904:	bf00      	nop
 80a0906:	bf00      	nop
 80a0908:	bf00      	nop
 80a090a:	bf00      	nop
 80a090c:	bf00      	nop
 80a090e:	bf00      	nop
 80a0910:	bf00      	nop
 80a0912:	bf00      	nop
 80a0914:	bf00      	nop
 80a0916:	bf00      	nop
 80a0918:	bf00      	nop
 80a091a:	bf00      	nop
 80a091c:	bf00      	nop
 80a091e:	bf00      	nop
 80a0920:	bf00      	nop
 80a0922:	bf00      	nop
 80a0924:	bf00      	nop
 80a0926:	bf00      	nop
 80a0928:	bf00      	nop
 80a092a:	bf00      	nop
 80a092c:	bf00      	nop
 80a092e:	bf00      	nop
 80a0930:	bf00      	nop
 80a0932:	bf00      	nop
 80a0934:	bf00      	nop
 80a0936:	bf00      	nop
 80a0938:	bf00      	nop
 80a093a:	bf00      	nop
 80a093c:	bf00      	nop
 80a093e:	bf00      	nop
 80a0940:	bf00      	nop
 80a0942:	bf00      	nop
 80a0944:	bf00      	nop
 80a0946:	bf00      	nop
 80a0948:	bf00      	nop
 80a094a:	bf00      	nop
 80a094c:	bf00      	nop
 80a094e:	bf00      	nop
 80a0950:	bf00      	nop
 80a0952:	bf00      	nop
 80a0954:	bf00      	nop
 80a0956:	bf00      	nop
 80a0958:	bf00      	nop
 80a095a:	bf00      	nop
 80a095c:	bf00      	nop
 80a095e:	bf00      	nop
 80a0960:	bf00      	nop
 80a0962:	bf00      	nop
 80a0964:	bf00      	nop
 80a0966:	bf00      	nop
 80a0968:	bf00      	nop
 80a096a:	bf00      	nop
 80a096c:	bf00      	nop
 80a096e:	bf00      	nop
 80a0970:	bf00      	nop
 80a0972:	bf00      	nop
 80a0974:	bf00      	nop
 80a0976:	bf00      	nop
 80a0978:	bf00      	nop
 80a097a:	bf00      	nop
 80a097c:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a097e:	79e3      	ldrb	r3, [r4, #7]
 80a0980:	6810      	ldr	r0, [r2, #0]
 80a0982:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0986:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a098a:	88bf      	ldrh	r7, [r7, #4]
 80a098c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0990:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0992:	4600      	mov	r0, r0
 80a0994:	bf00      	nop
 80a0996:	bf00      	nop
 80a0998:	bf00      	nop
 80a099a:	bf00      	nop
 80a099c:	bf00      	nop
 80a099e:	bf00      	nop
 80a09a0:	bf00      	nop
 80a09a2:	bf00      	nop
 80a09a4:	bf00      	nop
 80a09a6:	bf00      	nop
 80a09a8:	bf00      	nop
 80a09aa:	bf00      	nop
 80a09ac:	bf00      	nop
 80a09ae:	bf00      	nop
 80a09b0:	bf00      	nop
 80a09b2:	bf00      	nop
 80a09b4:	bf00      	nop
 80a09b6:	bf00      	nop
 80a09b8:	bf00      	nop
 80a09ba:	bf00      	nop
 80a09bc:	bf00      	nop
 80a09be:	bf00      	nop
 80a09c0:	bf00      	nop
 80a09c2:	bf00      	nop
 80a09c4:	bf00      	nop
 80a09c6:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a09c8:	9b04      	ldr	r3, [sp, #16]
 80a09ca:	085b      	lsrs	r3, r3, #1
 80a09cc:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a09ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a09d2:	3301      	adds	r3, #1
 80a09d4:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a09d6:	2b17      	cmp	r3, #23
 80a09d8:	f88d 3005 	strb.w	r3, [sp, #5]
 80a09dc:	f200 8083 	bhi.w	80a0ae6 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a09e0:	79e3      	ldrb	r3, [r4, #7]
 80a09e2:	6810      	ldr	r0, [r2, #0]
 80a09e4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a09e8:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a09ec:	88bf      	ldrh	r7, [r7, #4]
 80a09ee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a09f2:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a09f4:	9803      	ldr	r0, [sp, #12]
 80a09f6:	9b04      	ldr	r3, [sp, #16]
 80a09f8:	4218      	tst	r0, r3
 80a09fa:	f47f af73 	bne.w	80a08e4 <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a09fe:	4600      	mov	r0, r0
 80a0a00:	bf00      	nop
 80a0a02:	bf00      	nop
 80a0a04:	bf00      	nop
 80a0a06:	bf00      	nop
 80a0a08:	bf00      	nop
 80a0a0a:	bf00      	nop
 80a0a0c:	bf00      	nop
 80a0a0e:	bf00      	nop
 80a0a10:	bf00      	nop
 80a0a12:	bf00      	nop
 80a0a14:	bf00      	nop
 80a0a16:	bf00      	nop
 80a0a18:	bf00      	nop
 80a0a1a:	bf00      	nop
 80a0a1c:	bf00      	nop
 80a0a1e:	bf00      	nop
 80a0a20:	bf00      	nop
 80a0a22:	bf00      	nop
 80a0a24:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a0a26:	79e3      	ldrb	r3, [r4, #7]
 80a0a28:	6810      	ldr	r0, [r2, #0]
 80a0a2a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0a2e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0a32:	88bf      	ldrh	r7, [r7, #4]
 80a0a34:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0a38:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0a3a:	4600      	mov	r0, r0
 80a0a3c:	bf00      	nop
 80a0a3e:	bf00      	nop
 80a0a40:	bf00      	nop
 80a0a42:	bf00      	nop
 80a0a44:	bf00      	nop
 80a0a46:	bf00      	nop
 80a0a48:	bf00      	nop
 80a0a4a:	bf00      	nop
 80a0a4c:	bf00      	nop
 80a0a4e:	bf00      	nop
 80a0a50:	bf00      	nop
 80a0a52:	bf00      	nop
 80a0a54:	bf00      	nop
 80a0a56:	bf00      	nop
 80a0a58:	bf00      	nop
 80a0a5a:	bf00      	nop
 80a0a5c:	bf00      	nop
 80a0a5e:	bf00      	nop
 80a0a60:	bf00      	nop
 80a0a62:	bf00      	nop
 80a0a64:	bf00      	nop
 80a0a66:	bf00      	nop
 80a0a68:	bf00      	nop
 80a0a6a:	bf00      	nop
 80a0a6c:	bf00      	nop
 80a0a6e:	bf00      	nop
 80a0a70:	bf00      	nop
 80a0a72:	bf00      	nop
 80a0a74:	bf00      	nop
 80a0a76:	bf00      	nop
 80a0a78:	bf00      	nop
 80a0a7a:	bf00      	nop
 80a0a7c:	bf00      	nop
 80a0a7e:	bf00      	nop
 80a0a80:	bf00      	nop
 80a0a82:	bf00      	nop
 80a0a84:	bf00      	nop
 80a0a86:	bf00      	nop
 80a0a88:	bf00      	nop
 80a0a8a:	bf00      	nop
 80a0a8c:	bf00      	nop
 80a0a8e:	bf00      	nop
 80a0a90:	bf00      	nop
 80a0a92:	bf00      	nop
 80a0a94:	bf00      	nop
 80a0a96:	bf00      	nop
 80a0a98:	bf00      	nop
 80a0a9a:	bf00      	nop
 80a0a9c:	bf00      	nop
 80a0a9e:	bf00      	nop
 80a0aa0:	bf00      	nop
 80a0aa2:	bf00      	nop
 80a0aa4:	bf00      	nop
 80a0aa6:	bf00      	nop
 80a0aa8:	bf00      	nop
 80a0aaa:	bf00      	nop
 80a0aac:	bf00      	nop
 80a0aae:	bf00      	nop
 80a0ab0:	bf00      	nop
 80a0ab2:	bf00      	nop
 80a0ab4:	bf00      	nop
 80a0ab6:	bf00      	nop
 80a0ab8:	bf00      	nop
 80a0aba:	bf00      	nop
 80a0abc:	bf00      	nop
 80a0abe:	bf00      	nop
 80a0ac0:	bf00      	nop
 80a0ac2:	bf00      	nop
 80a0ac4:	bf00      	nop
 80a0ac6:	bf00      	nop
 80a0ac8:	bf00      	nop
 80a0aca:	bf00      	nop
 80a0acc:	bf00      	nop
 80a0ace:	bf00      	nop
 80a0ad0:	bf00      	nop
 80a0ad2:	bf00      	nop
 80a0ad4:	bf00      	nop
 80a0ad6:	bf00      	nop
 80a0ad8:	bf00      	nop
 80a0ada:	bf00      	nop
 80a0adc:	bf00      	nop
 80a0ade:	bf00      	nop
 80a0ae0:	bf00      	nop
 80a0ae2:	bf00      	nop
 80a0ae4:	e770      	b.n	80a09c8 <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0ae6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0aea:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0aec:	b29b      	uxth	r3, r3
 80a0aee:	2b00      	cmp	r3, #0
 80a0af0:	f47f aecf 	bne.w	80a0892 <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a0af4:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a0af6:	f7ff fbcd 	bl	80a0294 <micros>
 80a0afa:	6120      	str	r0, [r4, #16]
}
 80a0afc:	b006      	add	sp, #24
 80a0afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0b02:	4b5e      	ldr	r3, [pc, #376]	; (80a0c7c <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a0b04:	4a5e      	ldr	r2, [pc, #376]	; (80a0c80 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0b06:	4618      	mov	r0, r3
 80a0b08:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0b0a:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0b0e:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0b10:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0b14:	b292      	uxth	r2, r2
 80a0b16:	2a00      	cmp	r2, #0
 80a0b18:	d0ec      	beq.n	80a0af4 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0b1a:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0b1e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0b22:	f10e 0503 	add.w	r5, lr, #3
 80a0b26:	3a03      	subs	r2, #3
 80a0b28:	b292      	uxth	r2, r2
 80a0b2a:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0b2e:	f89e 2000 	ldrb.w	r2, [lr]
 80a0b32:	b2d2      	uxtb	r2, r2
 80a0b34:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0b38:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a0b3c:	b2d2      	uxtb	r2, r2
 80a0b3e:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0b42:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a0b46:	b2d2      	uxtb	r2, r2
 80a0b48:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0b4c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a0b50:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a0b54:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a0b58:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a0b5c:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a0b60:	ea42 020c 	orr.w	r2, r2, ip
 80a0b64:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0b66:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a0b6a:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0b6c:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a0b6e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0b72:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0b76:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0b7a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0b7e:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a0b80:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a0b84:	9e03      	ldr	r6, [sp, #12]
 80a0b86:	9a04      	ldr	r2, [sp, #16]
 80a0b88:	4216      	tst	r6, r2
 80a0b8a:	d023      	beq.n	80a0bd4 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0b8c:	685a      	ldr	r2, [r3, #4]
 80a0b8e:	9e05      	ldr	r6, [sp, #20]
 80a0b90:	1b92      	subs	r2, r2, r6
 80a0b92:	2a4f      	cmp	r2, #79	; 0x4f
 80a0b94:	d9fa      	bls.n	80a0b8c <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a0b96:	79e2      	ldrb	r2, [r4, #7]
 80a0b98:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0b9c:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0ba0:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0ba4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0ba8:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0bac:	6842      	ldr	r2, [r0, #4]
 80a0bae:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a0bb0:	685a      	ldr	r2, [r3, #4]
 80a0bb2:	9e05      	ldr	r6, [sp, #20]
 80a0bb4:	1b92      	subs	r2, r2, r6
 80a0bb6:	2a07      	cmp	r2, #7
 80a0bb8:	d9fa      	bls.n	80a0bb0 <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a0bba:	9a04      	ldr	r2, [sp, #16]
 80a0bbc:	0852      	lsrs	r2, r2, #1
 80a0bbe:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0bc0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a0bc4:	3201      	adds	r2, #1
 80a0bc6:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0bc8:	2a17      	cmp	r2, #23
 80a0bca:	f88d 2005 	strb.w	r2, [sp, #5]
 80a0bce:	d9cc      	bls.n	80a0b6a <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0bd0:	46ae      	mov	lr, r5
 80a0bd2:	e79d      	b.n	80a0b10 <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a0bd4:	685a      	ldr	r2, [r3, #4]
 80a0bd6:	9e05      	ldr	r6, [sp, #20]
 80a0bd8:	1b92      	subs	r2, r2, r6
 80a0bda:	2a18      	cmp	r2, #24
 80a0bdc:	d9fa      	bls.n	80a0bd4 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a0bde:	79e2      	ldrb	r2, [r4, #7]
 80a0be0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0be4:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0be8:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0bec:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0bf0:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0bf4:	6842      	ldr	r2, [r0, #4]
 80a0bf6:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a0bf8:	685a      	ldr	r2, [r3, #4]
 80a0bfa:	9e05      	ldr	r6, [sp, #20]
 80a0bfc:	1b92      	subs	r2, r2, r6
 80a0bfe:	2a45      	cmp	r2, #69	; 0x45
 80a0c00:	d9fa      	bls.n	80a0bf8 <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a0c02:	e7da      	b.n	80a0bba <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a0c04:	46ae      	mov	lr, r5
 80a0c06:	f7ff bbda 	b.w	80a03be <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a0c0a:	4a1d      	ldr	r2, [pc, #116]	; (80a0c80 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a0c0c:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a0c10:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a0c12:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0c16:	b29b      	uxth	r3, r3
 80a0c18:	2b00      	cmp	r3, #0
 80a0c1a:	f43f af6b 	beq.w	80a0af4 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a0c1e:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a0c20:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0c24:	f10e 0104 	add.w	r1, lr, #4
 80a0c28:	3b04      	subs	r3, #4
 80a0c2a:	b29b      	uxth	r3, r3
 80a0c2c:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0c30:	f89e 3000 	ldrb.w	r3, [lr]
 80a0c34:	b2db      	uxtb	r3, r3
 80a0c36:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0c3a:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0c3e:	b2db      	uxtb	r3, r3
 80a0c40:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0c44:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0c48:	b2db      	uxtb	r3, r3
 80a0c4a:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a0c4e:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a0c52:	b2db      	uxtb	r3, r3
 80a0c54:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a0c58:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a0c5c:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a0c60:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a0c64:	043f      	lsls	r7, r7, #16
 80a0c66:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a0c6a:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a0c6e:	4303      	orrs	r3, r0
 80a0c70:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a0c74:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a0c76:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0c7a:	e07e      	b.n	80a0d7a <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a0c7c:	e0001000 	.word	0xe0001000
 80a0c80:	20000390 	.word	0x20000390
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0c84:	4600      	mov	r0, r0
 80a0c86:	bf00      	nop
 80a0c88:	bf00      	nop
 80a0c8a:	bf00      	nop
 80a0c8c:	bf00      	nop
 80a0c8e:	bf00      	nop
 80a0c90:	bf00      	nop
 80a0c92:	bf00      	nop
 80a0c94:	bf00      	nop
 80a0c96:	bf00      	nop
 80a0c98:	bf00      	nop
 80a0c9a:	bf00      	nop
 80a0c9c:	bf00      	nop
 80a0c9e:	bf00      	nop
 80a0ca0:	bf00      	nop
 80a0ca2:	bf00      	nop
 80a0ca4:	bf00      	nop
 80a0ca6:	bf00      	nop
 80a0ca8:	bf00      	nop
 80a0caa:	bf00      	nop
 80a0cac:	bf00      	nop
 80a0cae:	bf00      	nop
 80a0cb0:	bf00      	nop
 80a0cb2:	bf00      	nop
 80a0cb4:	bf00      	nop
 80a0cb6:	bf00      	nop
 80a0cb8:	bf00      	nop
 80a0cba:	bf00      	nop
 80a0cbc:	bf00      	nop
 80a0cbe:	bf00      	nop
 80a0cc0:	bf00      	nop
 80a0cc2:	bf00      	nop
 80a0cc4:	bf00      	nop
 80a0cc6:	bf00      	nop
 80a0cc8:	bf00      	nop
 80a0cca:	bf00      	nop
 80a0ccc:	bf00      	nop
 80a0cce:	bf00      	nop
 80a0cd0:	bf00      	nop
 80a0cd2:	bf00      	nop
 80a0cd4:	bf00      	nop
 80a0cd6:	bf00      	nop
 80a0cd8:	bf00      	nop
 80a0cda:	bf00      	nop
 80a0cdc:	bf00      	nop
 80a0cde:	bf00      	nop
 80a0ce0:	bf00      	nop
 80a0ce2:	bf00      	nop
 80a0ce4:	bf00      	nop
 80a0ce6:	bf00      	nop
 80a0ce8:	bf00      	nop
 80a0cea:	bf00      	nop
 80a0cec:	bf00      	nop
 80a0cee:	bf00      	nop
 80a0cf0:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a0cf2:	79e3      	ldrb	r3, [r4, #7]
 80a0cf4:	6810      	ldr	r0, [r2, #0]
 80a0cf6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0cfa:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0cfe:	88bf      	ldrh	r7, [r7, #4]
 80a0d00:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0d04:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0d06:	4600      	mov	r0, r0
 80a0d08:	bf00      	nop
 80a0d0a:	bf00      	nop
 80a0d0c:	bf00      	nop
 80a0d0e:	bf00      	nop
 80a0d10:	bf00      	nop
 80a0d12:	bf00      	nop
 80a0d14:	bf00      	nop
 80a0d16:	bf00      	nop
 80a0d18:	bf00      	nop
 80a0d1a:	bf00      	nop
 80a0d1c:	bf00      	nop
 80a0d1e:	bf00      	nop
 80a0d20:	bf00      	nop
 80a0d22:	bf00      	nop
 80a0d24:	bf00      	nop
 80a0d26:	bf00      	nop
 80a0d28:	bf00      	nop
 80a0d2a:	bf00      	nop
 80a0d2c:	bf00      	nop
 80a0d2e:	bf00      	nop
 80a0d30:	bf00      	nop
 80a0d32:	bf00      	nop
 80a0d34:	bf00      	nop
 80a0d36:	bf00      	nop
 80a0d38:	bf00      	nop
 80a0d3a:	bf00      	nop
 80a0d3c:	bf00      	nop
 80a0d3e:	bf00      	nop
 80a0d40:	bf00      	nop
 80a0d42:	bf00      	nop
 80a0d44:	bf00      	nop
 80a0d46:	bf00      	nop
 80a0d48:	bf00      	nop
 80a0d4a:	bf00      	nop
 80a0d4c:	bf00      	nop
 80a0d4e:	bf00      	nop
 80a0d50:	bf00      	nop
 80a0d52:	bf00      	nop
 80a0d54:	bf00      	nop
 80a0d56:	bf00      	nop
 80a0d58:	bf00      	nop
 80a0d5a:	bf00      	nop
 80a0d5c:	bf00      	nop
 80a0d5e:	bf00      	nop
 80a0d60:	bf00      	nop
 80a0d62:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0d64:	9b04      	ldr	r3, [sp, #16]
 80a0d66:	085b      	lsrs	r3, r3, #1
 80a0d68:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a0d6a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0d6e:	3301      	adds	r3, #1
 80a0d70:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a0d72:	2b1f      	cmp	r3, #31
 80a0d74:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0d78:	d87e      	bhi.n	80a0e78 <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a0d7a:	79e3      	ldrb	r3, [r4, #7]
 80a0d7c:	6810      	ldr	r0, [r2, #0]
 80a0d7e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0d82:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0d86:	88bf      	ldrh	r7, [r7, #4]
 80a0d88:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0d8c:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0d8e:	9803      	ldr	r0, [sp, #12]
 80a0d90:	9b04      	ldr	r3, [sp, #16]
 80a0d92:	4218      	tst	r0, r3
 80a0d94:	f47f af76 	bne.w	80a0c84 <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0d98:	4600      	mov	r0, r0
 80a0d9a:	bf00      	nop
 80a0d9c:	bf00      	nop
 80a0d9e:	bf00      	nop
 80a0da0:	bf00      	nop
 80a0da2:	bf00      	nop
 80a0da4:	bf00      	nop
 80a0da6:	bf00      	nop
 80a0da8:	bf00      	nop
 80a0daa:	bf00      	nop
 80a0dac:	bf00      	nop
 80a0dae:	bf00      	nop
 80a0db0:	bf00      	nop
 80a0db2:	bf00      	nop
 80a0db4:	bf00      	nop
 80a0db6:	bf00      	nop
 80a0db8:	bf00      	nop
 80a0dba:	bf00      	nop
 80a0dbc:	bf00      	nop
 80a0dbe:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a0dc0:	79e3      	ldrb	r3, [r4, #7]
 80a0dc2:	6810      	ldr	r0, [r2, #0]
 80a0dc4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0dc8:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0dcc:	88bf      	ldrh	r7, [r7, #4]
 80a0dce:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0dd2:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0dd4:	4600      	mov	r0, r0
 80a0dd6:	bf00      	nop
 80a0dd8:	bf00      	nop
 80a0dda:	bf00      	nop
 80a0ddc:	bf00      	nop
 80a0dde:	bf00      	nop
 80a0de0:	bf00      	nop
 80a0de2:	bf00      	nop
 80a0de4:	bf00      	nop
 80a0de6:	bf00      	nop
 80a0de8:	bf00      	nop
 80a0dea:	bf00      	nop
 80a0dec:	bf00      	nop
 80a0dee:	bf00      	nop
 80a0df0:	bf00      	nop
 80a0df2:	bf00      	nop
 80a0df4:	bf00      	nop
 80a0df6:	bf00      	nop
 80a0df8:	bf00      	nop
 80a0dfa:	bf00      	nop
 80a0dfc:	bf00      	nop
 80a0dfe:	bf00      	nop
 80a0e00:	bf00      	nop
 80a0e02:	bf00      	nop
 80a0e04:	bf00      	nop
 80a0e06:	bf00      	nop
 80a0e08:	bf00      	nop
 80a0e0a:	bf00      	nop
 80a0e0c:	bf00      	nop
 80a0e0e:	bf00      	nop
 80a0e10:	bf00      	nop
 80a0e12:	bf00      	nop
 80a0e14:	bf00      	nop
 80a0e16:	bf00      	nop
 80a0e18:	bf00      	nop
 80a0e1a:	bf00      	nop
 80a0e1c:	bf00      	nop
 80a0e1e:	bf00      	nop
 80a0e20:	bf00      	nop
 80a0e22:	bf00      	nop
 80a0e24:	bf00      	nop
 80a0e26:	bf00      	nop
 80a0e28:	bf00      	nop
 80a0e2a:	bf00      	nop
 80a0e2c:	bf00      	nop
 80a0e2e:	bf00      	nop
 80a0e30:	bf00      	nop
 80a0e32:	bf00      	nop
 80a0e34:	bf00      	nop
 80a0e36:	bf00      	nop
 80a0e38:	bf00      	nop
 80a0e3a:	bf00      	nop
 80a0e3c:	bf00      	nop
 80a0e3e:	bf00      	nop
 80a0e40:	bf00      	nop
 80a0e42:	bf00      	nop
 80a0e44:	bf00      	nop
 80a0e46:	bf00      	nop
 80a0e48:	bf00      	nop
 80a0e4a:	bf00      	nop
 80a0e4c:	bf00      	nop
 80a0e4e:	bf00      	nop
 80a0e50:	bf00      	nop
 80a0e52:	bf00      	nop
 80a0e54:	bf00      	nop
 80a0e56:	bf00      	nop
 80a0e58:	bf00      	nop
 80a0e5a:	bf00      	nop
 80a0e5c:	bf00      	nop
 80a0e5e:	bf00      	nop
 80a0e60:	bf00      	nop
 80a0e62:	bf00      	nop
 80a0e64:	bf00      	nop
 80a0e66:	bf00      	nop
 80a0e68:	bf00      	nop
 80a0e6a:	bf00      	nop
 80a0e6c:	bf00      	nop
 80a0e6e:	bf00      	nop
 80a0e70:	bf00      	nop
 80a0e72:	bf00      	nop
 80a0e74:	bf00      	nop
 80a0e76:	e775      	b.n	80a0d64 <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a0e78:	468e      	mov	lr, r1
 80a0e7a:	e6ca      	b.n	80a0c12 <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a0e7c:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a0e7e:	2903      	cmp	r1, #3
 80a0e80:	f000 812e 	beq.w	80a10e0 <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0e84:	4a1e      	ldr	r2, [pc, #120]	; (80a0f00 <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0e86:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0e8a:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0e8c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0e90:	b29b      	uxth	r3, r3
 80a0e92:	2b00      	cmp	r3, #0
 80a0e94:	f43f ae2e 	beq.w	80a0af4 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0e98:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0e9a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0e9e:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a0ea0:	3b03      	subs	r3, #3
 80a0ea2:	b29b      	uxth	r3, r3
 80a0ea4:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0ea8:	f89e 3000 	ldrb.w	r3, [lr]
 80a0eac:	f10e 0103 	add.w	r1, lr, #3
 80a0eb0:	b2db      	uxtb	r3, r3
 80a0eb2:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0eb6:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0eba:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0ebe:	b2db      	uxtb	r3, r3
 80a0ec0:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a0ec4:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0ec8:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a0ecc:	b2db      	uxtb	r3, r3
 80a0ece:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0ed2:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a0ed6:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0eda:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0ede:	021b      	lsls	r3, r3, #8
 80a0ee0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0ee4:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0ee8:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a0eec:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0ef0:	433b      	orrs	r3, r7
 80a0ef2:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0ef4:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a0ef8:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a0efc:	e07d      	b.n	80a0ffa <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a0efe:	bf00      	nop
 80a0f00:	20000390 	.word	0x20000390
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a0f04:	9b04      	ldr	r3, [sp, #16]
 80a0f06:	085b      	lsrs	r3, r3, #1
 80a0f08:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0f0a:	4600      	mov	r0, r0
 80a0f0c:	bf00      	nop
 80a0f0e:	bf00      	nop
 80a0f10:	bf00      	nop
 80a0f12:	bf00      	nop
 80a0f14:	bf00      	nop
 80a0f16:	bf00      	nop
 80a0f18:	bf00      	nop
 80a0f1a:	bf00      	nop
 80a0f1c:	bf00      	nop
 80a0f1e:	bf00      	nop
 80a0f20:	bf00      	nop
 80a0f22:	bf00      	nop
 80a0f24:	bf00      	nop
 80a0f26:	bf00      	nop
 80a0f28:	bf00      	nop
 80a0f2a:	bf00      	nop
 80a0f2c:	bf00      	nop
 80a0f2e:	bf00      	nop
 80a0f30:	bf00      	nop
 80a0f32:	bf00      	nop
 80a0f34:	bf00      	nop
 80a0f36:	bf00      	nop
 80a0f38:	bf00      	nop
 80a0f3a:	bf00      	nop
 80a0f3c:	bf00      	nop
 80a0f3e:	bf00      	nop
 80a0f40:	bf00      	nop
 80a0f42:	bf00      	nop
 80a0f44:	bf00      	nop
 80a0f46:	bf00      	nop
 80a0f48:	bf00      	nop
 80a0f4a:	bf00      	nop
 80a0f4c:	bf00      	nop
 80a0f4e:	bf00      	nop
 80a0f50:	bf00      	nop
 80a0f52:	bf00      	nop
 80a0f54:	bf00      	nop
 80a0f56:	bf00      	nop
 80a0f58:	bf00      	nop
 80a0f5a:	bf00      	nop
 80a0f5c:	bf00      	nop
 80a0f5e:	bf00      	nop
 80a0f60:	bf00      	nop
 80a0f62:	bf00      	nop
 80a0f64:	bf00      	nop
 80a0f66:	bf00      	nop
 80a0f68:	bf00      	nop
 80a0f6a:	bf00      	nop
 80a0f6c:	bf00      	nop
 80a0f6e:	bf00      	nop
 80a0f70:	bf00      	nop
 80a0f72:	bf00      	nop
 80a0f74:	bf00      	nop
 80a0f76:	bf00      	nop
 80a0f78:	bf00      	nop
 80a0f7a:	bf00      	nop
 80a0f7c:	bf00      	nop
 80a0f7e:	bf00      	nop
 80a0f80:	bf00      	nop
 80a0f82:	bf00      	nop
 80a0f84:	bf00      	nop
 80a0f86:	bf00      	nop
 80a0f88:	bf00      	nop
 80a0f8a:	bf00      	nop
 80a0f8c:	bf00      	nop
 80a0f8e:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a0f90:	79e0      	ldrb	r0, [r4, #7]
 80a0f92:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a0f94:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a0f98:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a0f9c:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a0fa0:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0fa4:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a0fa8:	3301      	adds	r3, #1
 80a0faa:	b2db      	uxtb	r3, r3
 80a0fac:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a0fb0:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0fb4:	4600      	mov	r0, r0
 80a0fb6:	bf00      	nop
 80a0fb8:	bf00      	nop
 80a0fba:	bf00      	nop
 80a0fbc:	bf00      	nop
 80a0fbe:	bf00      	nop
 80a0fc0:	bf00      	nop
 80a0fc2:	bf00      	nop
 80a0fc4:	bf00      	nop
 80a0fc6:	bf00      	nop
 80a0fc8:	bf00      	nop
 80a0fca:	bf00      	nop
 80a0fcc:	bf00      	nop
 80a0fce:	bf00      	nop
 80a0fd0:	bf00      	nop
 80a0fd2:	bf00      	nop
 80a0fd4:	bf00      	nop
 80a0fd6:	bf00      	nop
 80a0fd8:	bf00      	nop
 80a0fda:	bf00      	nop
 80a0fdc:	bf00      	nop
          if(j==24) break;
 80a0fde:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0fe2:	2b18      	cmp	r3, #24
 80a0fe4:	d07a      	beq.n	80a10dc <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a0fe6:	79e3      	ldrb	r3, [r4, #7]
 80a0fe8:	6810      	ldr	r0, [r2, #0]
 80a0fea:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0fee:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0ff2:	88bf      	ldrh	r7, [r7, #4]
 80a0ff4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0ff8:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a0ffa:	9803      	ldr	r0, [sp, #12]
 80a0ffc:	9b04      	ldr	r3, [sp, #16]
 80a0ffe:	4218      	tst	r0, r3
 80a1000:	d180      	bne.n	80a0f04 <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a1002:	4600      	mov	r0, r0
 80a1004:	bf00      	nop
 80a1006:	bf00      	nop
 80a1008:	bf00      	nop
 80a100a:	bf00      	nop
 80a100c:	bf00      	nop
 80a100e:	bf00      	nop
 80a1010:	bf00      	nop
 80a1012:	bf00      	nop
 80a1014:	bf00      	nop
 80a1016:	bf00      	nop
 80a1018:	bf00      	nop
 80a101a:	bf00      	nop
 80a101c:	bf00      	nop
 80a101e:	bf00      	nop
 80a1020:	bf00      	nop
 80a1022:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a1024:	79e3      	ldrb	r3, [r4, #7]
 80a1026:	6810      	ldr	r0, [r2, #0]
 80a1028:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a102c:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1030:	88bf      	ldrh	r7, [r7, #4]
 80a1032:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1036:	831f      	strh	r7, [r3, #24]
          j++;
 80a1038:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a103c:	3301      	adds	r3, #1
 80a103e:	b2db      	uxtb	r3, r3
 80a1040:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a1044:	9b04      	ldr	r3, [sp, #16]
 80a1046:	085b      	lsrs	r3, r3, #1
 80a1048:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a104a:	4600      	mov	r0, r0
 80a104c:	bf00      	nop
 80a104e:	bf00      	nop
 80a1050:	bf00      	nop
 80a1052:	bf00      	nop
 80a1054:	bf00      	nop
 80a1056:	bf00      	nop
 80a1058:	bf00      	nop
 80a105a:	bf00      	nop
 80a105c:	bf00      	nop
 80a105e:	bf00      	nop
 80a1060:	bf00      	nop
 80a1062:	bf00      	nop
 80a1064:	bf00      	nop
 80a1066:	bf00      	nop
 80a1068:	bf00      	nop
 80a106a:	bf00      	nop
 80a106c:	bf00      	nop
 80a106e:	bf00      	nop
 80a1070:	bf00      	nop
 80a1072:	bf00      	nop
 80a1074:	bf00      	nop
 80a1076:	bf00      	nop
 80a1078:	bf00      	nop
 80a107a:	bf00      	nop
 80a107c:	bf00      	nop
 80a107e:	bf00      	nop
 80a1080:	bf00      	nop
 80a1082:	bf00      	nop
 80a1084:	bf00      	nop
 80a1086:	bf00      	nop
 80a1088:	bf00      	nop
 80a108a:	bf00      	nop
 80a108c:	bf00      	nop
 80a108e:	bf00      	nop
 80a1090:	bf00      	nop
 80a1092:	bf00      	nop
 80a1094:	bf00      	nop
 80a1096:	bf00      	nop
 80a1098:	bf00      	nop
 80a109a:	bf00      	nop
 80a109c:	bf00      	nop
 80a109e:	bf00      	nop
 80a10a0:	bf00      	nop
 80a10a2:	bf00      	nop
 80a10a4:	bf00      	nop
 80a10a6:	bf00      	nop
 80a10a8:	bf00      	nop
 80a10aa:	bf00      	nop
 80a10ac:	bf00      	nop
 80a10ae:	bf00      	nop
 80a10b0:	bf00      	nop
 80a10b2:	bf00      	nop
 80a10b4:	bf00      	nop
 80a10b6:	bf00      	nop
 80a10b8:	bf00      	nop
 80a10ba:	bf00      	nop
 80a10bc:	bf00      	nop
 80a10be:	bf00      	nop
 80a10c0:	bf00      	nop
 80a10c2:	bf00      	nop
 80a10c4:	bf00      	nop
 80a10c6:	bf00      	nop
 80a10c8:	bf00      	nop
 80a10ca:	bf00      	nop
 80a10cc:	bf00      	nop
 80a10ce:	bf00      	nop
 80a10d0:	bf00      	nop
 80a10d2:	bf00      	nop
          if(j==24) break;
 80a10d4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a10d8:	2b18      	cmp	r3, #24
 80a10da:	d184      	bne.n	80a0fe6 <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a10dc:	468e      	mov	lr, r1
 80a10de:	e6d5      	b.n	80a0e8c <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a10e0:	4a17      	ldr	r2, [pc, #92]	; (80a1140 <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a10e2:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a10e6:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a10e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a10ec:	b29b      	uxth	r3, r3
 80a10ee:	2b00      	cmp	r3, #0
 80a10f0:	f43f ad00 	beq.w	80a0af4 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a10f4:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a10f6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a10fa:	f10e 0103 	add.w	r1, lr, #3
 80a10fe:	3b03      	subs	r3, #3
 80a1100:	b29b      	uxth	r3, r3
 80a1102:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1106:	f89e 3000 	ldrb.w	r3, [lr]
 80a110a:	b2db      	uxtb	r3, r3
 80a110c:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a1110:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1114:	b2db      	uxtb	r3, r3
 80a1116:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a111a:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a111e:	b2db      	uxtb	r3, r3
 80a1120:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1124:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a1128:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a112c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a1130:	021b      	lsls	r3, r3, #8
 80a1132:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a1136:	4303      	orrs	r3, r0
 80a1138:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a113a:	f88d 6005 	strb.w	r6, [sp, #5]
 80a113e:	e0e0      	b.n	80a1302 <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a1140:	20000390 	.word	0x20000390
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1144:	4600      	mov	r0, r0
 80a1146:	bf00      	nop
 80a1148:	bf00      	nop
 80a114a:	bf00      	nop
 80a114c:	bf00      	nop
 80a114e:	bf00      	nop
 80a1150:	bf00      	nop
 80a1152:	bf00      	nop
 80a1154:	bf00      	nop
 80a1156:	bf00      	nop
 80a1158:	bf00      	nop
 80a115a:	bf00      	nop
 80a115c:	bf00      	nop
 80a115e:	bf00      	nop
 80a1160:	bf00      	nop
 80a1162:	bf00      	nop
 80a1164:	bf00      	nop
 80a1166:	bf00      	nop
 80a1168:	bf00      	nop
 80a116a:	bf00      	nop
 80a116c:	bf00      	nop
 80a116e:	bf00      	nop
 80a1170:	bf00      	nop
 80a1172:	bf00      	nop
 80a1174:	bf00      	nop
 80a1176:	bf00      	nop
 80a1178:	bf00      	nop
 80a117a:	bf00      	nop
 80a117c:	bf00      	nop
 80a117e:	bf00      	nop
 80a1180:	bf00      	nop
 80a1182:	bf00      	nop
 80a1184:	bf00      	nop
 80a1186:	bf00      	nop
 80a1188:	bf00      	nop
 80a118a:	bf00      	nop
 80a118c:	bf00      	nop
 80a118e:	bf00      	nop
 80a1190:	bf00      	nop
 80a1192:	bf00      	nop
 80a1194:	bf00      	nop
 80a1196:	bf00      	nop
 80a1198:	bf00      	nop
 80a119a:	bf00      	nop
 80a119c:	bf00      	nop
 80a119e:	bf00      	nop
 80a11a0:	bf00      	nop
 80a11a2:	bf00      	nop
 80a11a4:	bf00      	nop
 80a11a6:	bf00      	nop
 80a11a8:	bf00      	nop
 80a11aa:	bf00      	nop
 80a11ac:	bf00      	nop
 80a11ae:	bf00      	nop
 80a11b0:	bf00      	nop
 80a11b2:	bf00      	nop
 80a11b4:	bf00      	nop
 80a11b6:	bf00      	nop
 80a11b8:	bf00      	nop
 80a11ba:	bf00      	nop
 80a11bc:	bf00      	nop
 80a11be:	bf00      	nop
 80a11c0:	bf00      	nop
 80a11c2:	bf00      	nop
 80a11c4:	bf00      	nop
 80a11c6:	bf00      	nop
 80a11c8:	bf00      	nop
 80a11ca:	bf00      	nop
 80a11cc:	bf00      	nop
 80a11ce:	bf00      	nop
 80a11d0:	bf00      	nop
 80a11d2:	bf00      	nop
 80a11d4:	bf00      	nop
 80a11d6:	bf00      	nop
 80a11d8:	bf00      	nop
 80a11da:	bf00      	nop
 80a11dc:	bf00      	nop
 80a11de:	bf00      	nop
 80a11e0:	bf00      	nop
 80a11e2:	bf00      	nop
 80a11e4:	bf00      	nop
 80a11e6:	bf00      	nop
 80a11e8:	bf00      	nop
 80a11ea:	bf00      	nop
 80a11ec:	bf00      	nop
 80a11ee:	bf00      	nop
 80a11f0:	bf00      	nop
 80a11f2:	bf00      	nop
 80a11f4:	bf00      	nop
 80a11f6:	bf00      	nop
 80a11f8:	bf00      	nop
 80a11fa:	bf00      	nop
 80a11fc:	bf00      	nop
 80a11fe:	bf00      	nop
 80a1200:	bf00      	nop
 80a1202:	bf00      	nop
 80a1204:	bf00      	nop
 80a1206:	bf00      	nop
 80a1208:	bf00      	nop
 80a120a:	bf00      	nop
 80a120c:	bf00      	nop
 80a120e:	bf00      	nop
 80a1210:	bf00      	nop
 80a1212:	bf00      	nop
 80a1214:	bf00      	nop
 80a1216:	bf00      	nop
 80a1218:	bf00      	nop
 80a121a:	bf00      	nop
 80a121c:	bf00      	nop
 80a121e:	bf00      	nop
 80a1220:	bf00      	nop
 80a1222:	bf00      	nop
 80a1224:	bf00      	nop
 80a1226:	bf00      	nop
 80a1228:	bf00      	nop
 80a122a:	bf00      	nop
 80a122c:	bf00      	nop
 80a122e:	bf00      	nop
 80a1230:	bf00      	nop
 80a1232:	bf00      	nop
 80a1234:	bf00      	nop
 80a1236:	bf00      	nop
 80a1238:	bf00      	nop
 80a123a:	bf00      	nop
 80a123c:	bf00      	nop
 80a123e:	bf00      	nop
 80a1240:	bf00      	nop
 80a1242:	bf00      	nop
 80a1244:	bf00      	nop
 80a1246:	bf00      	nop
 80a1248:	bf00      	nop
 80a124a:	bf00      	nop
 80a124c:	bf00      	nop
 80a124e:	bf00      	nop
 80a1250:	bf00      	nop
 80a1252:	bf00      	nop
 80a1254:	bf00      	nop
 80a1256:	bf00      	nop
 80a1258:	bf00      	nop
 80a125a:	bf00      	nop
 80a125c:	bf00      	nop
 80a125e:	bf00      	nop
 80a1260:	bf00      	nop
 80a1262:	bf00      	nop
 80a1264:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a1266:	79e3      	ldrb	r3, [r4, #7]
 80a1268:	6810      	ldr	r0, [r2, #0]
 80a126a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a126e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1272:	88bf      	ldrh	r7, [r7, #4]
 80a1274:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1278:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a127a:	4600      	mov	r0, r0
 80a127c:	bf00      	nop
 80a127e:	bf00      	nop
 80a1280:	bf00      	nop
 80a1282:	bf00      	nop
 80a1284:	bf00      	nop
 80a1286:	bf00      	nop
 80a1288:	bf00      	nop
 80a128a:	bf00      	nop
 80a128c:	bf00      	nop
 80a128e:	bf00      	nop
 80a1290:	bf00      	nop
 80a1292:	bf00      	nop
 80a1294:	bf00      	nop
 80a1296:	bf00      	nop
 80a1298:	bf00      	nop
 80a129a:	bf00      	nop
 80a129c:	bf00      	nop
 80a129e:	bf00      	nop
 80a12a0:	bf00      	nop
 80a12a2:	bf00      	nop
 80a12a4:	bf00      	nop
 80a12a6:	bf00      	nop
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
 80a12ca:	bf00      	nop
 80a12cc:	bf00      	nop
 80a12ce:	bf00      	nop
 80a12d0:	bf00      	nop
 80a12d2:	bf00      	nop
 80a12d4:	bf00      	nop
 80a12d6:	bf00      	nop
 80a12d8:	bf00      	nop
 80a12da:	bf00      	nop
 80a12dc:	bf00      	nop
 80a12de:	bf00      	nop
 80a12e0:	bf00      	nop
 80a12e2:	bf00      	nop
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a12ea:	9b04      	ldr	r3, [sp, #16]
 80a12ec:	085b      	lsrs	r3, r3, #1
 80a12ee:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a12f0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a12f4:	3301      	adds	r3, #1
 80a12f6:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a12f8:	2b17      	cmp	r3, #23
 80a12fa:	f88d 3005 	strb.w	r3, [sp, #5]
 80a12fe:	f200 80e3 	bhi.w	80a14c8 <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a1302:	79e3      	ldrb	r3, [r4, #7]
 80a1304:	6810      	ldr	r0, [r2, #0]
 80a1306:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a130a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a130e:	88bf      	ldrh	r7, [r7, #4]
 80a1310:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1314:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1316:	9803      	ldr	r0, [sp, #12]
 80a1318:	9b04      	ldr	r3, [sp, #16]
 80a131a:	4218      	tst	r0, r3
 80a131c:	f47f af12 	bne.w	80a1144 <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1320:	4600      	mov	r0, r0
 80a1322:	bf00      	nop
 80a1324:	bf00      	nop
 80a1326:	bf00      	nop
 80a1328:	bf00      	nop
 80a132a:	bf00      	nop
 80a132c:	bf00      	nop
 80a132e:	bf00      	nop
 80a1330:	bf00      	nop
 80a1332:	bf00      	nop
 80a1334:	bf00      	nop
 80a1336:	bf00      	nop
 80a1338:	bf00      	nop
 80a133a:	bf00      	nop
 80a133c:	bf00      	nop
 80a133e:	bf00      	nop
 80a1340:	bf00      	nop
 80a1342:	bf00      	nop
 80a1344:	bf00      	nop
 80a1346:	bf00      	nop
 80a1348:	bf00      	nop
 80a134a:	bf00      	nop
 80a134c:	bf00      	nop
 80a134e:	bf00      	nop
 80a1350:	bf00      	nop
 80a1352:	bf00      	nop
 80a1354:	bf00      	nop
 80a1356:	bf00      	nop
 80a1358:	bf00      	nop
 80a135a:	bf00      	nop
 80a135c:	bf00      	nop
 80a135e:	bf00      	nop
 80a1360:	bf00      	nop
 80a1362:	bf00      	nop
 80a1364:	bf00      	nop
 80a1366:	bf00      	nop
 80a1368:	bf00      	nop
 80a136a:	bf00      	nop
 80a136c:	bf00      	nop
 80a136e:	bf00      	nop
 80a1370:	bf00      	nop
 80a1372:	bf00      	nop
 80a1374:	bf00      	nop
 80a1376:	bf00      	nop
 80a1378:	bf00      	nop
 80a137a:	bf00      	nop
 80a137c:	bf00      	nop
 80a137e:	bf00      	nop
 80a1380:	bf00      	nop
 80a1382:	bf00      	nop
 80a1384:	bf00      	nop
 80a1386:	bf00      	nop
 80a1388:	bf00      	nop
 80a138a:	bf00      	nop
 80a138c:	bf00      	nop
 80a138e:	bf00      	nop
 80a1390:	bf00      	nop
 80a1392:	bf00      	nop
 80a1394:	bf00      	nop
 80a1396:	bf00      	nop
 80a1398:	bf00      	nop
 80a139a:	bf00      	nop
 80a139c:	bf00      	nop
 80a139e:	bf00      	nop
 80a13a0:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a13a2:	79e3      	ldrb	r3, [r4, #7]
 80a13a4:	6810      	ldr	r0, [r2, #0]
 80a13a6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a13aa:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a13ae:	88bf      	ldrh	r7, [r7, #4]
 80a13b0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a13b4:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a13b6:	4600      	mov	r0, r0
 80a13b8:	bf00      	nop
 80a13ba:	bf00      	nop
 80a13bc:	bf00      	nop
 80a13be:	bf00      	nop
 80a13c0:	bf00      	nop
 80a13c2:	bf00      	nop
 80a13c4:	bf00      	nop
 80a13c6:	bf00      	nop
 80a13c8:	bf00      	nop
 80a13ca:	bf00      	nop
 80a13cc:	bf00      	nop
 80a13ce:	bf00      	nop
 80a13d0:	bf00      	nop
 80a13d2:	bf00      	nop
 80a13d4:	bf00      	nop
 80a13d6:	bf00      	nop
 80a13d8:	bf00      	nop
 80a13da:	bf00      	nop
 80a13dc:	bf00      	nop
 80a13de:	bf00      	nop
 80a13e0:	bf00      	nop
 80a13e2:	bf00      	nop
 80a13e4:	bf00      	nop
 80a13e6:	bf00      	nop
 80a13e8:	bf00      	nop
 80a13ea:	bf00      	nop
 80a13ec:	bf00      	nop
 80a13ee:	bf00      	nop
 80a13f0:	bf00      	nop
 80a13f2:	bf00      	nop
 80a13f4:	bf00      	nop
 80a13f6:	bf00      	nop
 80a13f8:	bf00      	nop
 80a13fa:	bf00      	nop
 80a13fc:	bf00      	nop
 80a13fe:	bf00      	nop
 80a1400:	bf00      	nop
 80a1402:	bf00      	nop
 80a1404:	bf00      	nop
 80a1406:	bf00      	nop
 80a1408:	bf00      	nop
 80a140a:	bf00      	nop
 80a140c:	bf00      	nop
 80a140e:	bf00      	nop
 80a1410:	bf00      	nop
 80a1412:	bf00      	nop
 80a1414:	bf00      	nop
 80a1416:	bf00      	nop
 80a1418:	bf00      	nop
 80a141a:	bf00      	nop
 80a141c:	bf00      	nop
 80a141e:	bf00      	nop
 80a1420:	bf00      	nop
 80a1422:	bf00      	nop
 80a1424:	bf00      	nop
 80a1426:	bf00      	nop
 80a1428:	bf00      	nop
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
 80a142e:	bf00      	nop
 80a1430:	bf00      	nop
 80a1432:	bf00      	nop
 80a1434:	bf00      	nop
 80a1436:	bf00      	nop
 80a1438:	bf00      	nop
 80a143a:	bf00      	nop
 80a143c:	bf00      	nop
 80a143e:	bf00      	nop
 80a1440:	bf00      	nop
 80a1442:	bf00      	nop
 80a1444:	bf00      	nop
 80a1446:	bf00      	nop
 80a1448:	bf00      	nop
 80a144a:	bf00      	nop
 80a144c:	bf00      	nop
 80a144e:	bf00      	nop
 80a1450:	bf00      	nop
 80a1452:	bf00      	nop
 80a1454:	bf00      	nop
 80a1456:	bf00      	nop
 80a1458:	bf00      	nop
 80a145a:	bf00      	nop
 80a145c:	bf00      	nop
 80a145e:	bf00      	nop
 80a1460:	bf00      	nop
 80a1462:	bf00      	nop
 80a1464:	bf00      	nop
 80a1466:	bf00      	nop
 80a1468:	bf00      	nop
 80a146a:	bf00      	nop
 80a146c:	bf00      	nop
 80a146e:	bf00      	nop
 80a1470:	bf00      	nop
 80a1472:	bf00      	nop
 80a1474:	bf00      	nop
 80a1476:	bf00      	nop
 80a1478:	bf00      	nop
 80a147a:	bf00      	nop
 80a147c:	bf00      	nop
 80a147e:	bf00      	nop
 80a1480:	bf00      	nop
 80a1482:	bf00      	nop
 80a1484:	bf00      	nop
 80a1486:	bf00      	nop
 80a1488:	bf00      	nop
 80a148a:	bf00      	nop
 80a148c:	bf00      	nop
 80a148e:	bf00      	nop
 80a1490:	bf00      	nop
 80a1492:	bf00      	nop
 80a1494:	bf00      	nop
 80a1496:	bf00      	nop
 80a1498:	bf00      	nop
 80a149a:	bf00      	nop
 80a149c:	bf00      	nop
 80a149e:	bf00      	nop
 80a14a0:	bf00      	nop
 80a14a2:	bf00      	nop
 80a14a4:	bf00      	nop
 80a14a6:	bf00      	nop
 80a14a8:	bf00      	nop
 80a14aa:	bf00      	nop
 80a14ac:	bf00      	nop
 80a14ae:	bf00      	nop
 80a14b0:	bf00      	nop
 80a14b2:	bf00      	nop
 80a14b4:	bf00      	nop
 80a14b6:	bf00      	nop
 80a14b8:	bf00      	nop
 80a14ba:	bf00      	nop
 80a14bc:	bf00      	nop
 80a14be:	bf00      	nop
 80a14c0:	bf00      	nop
 80a14c2:	bf00      	nop
 80a14c4:	bf00      	nop
 80a14c6:	e710      	b.n	80a12ea <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a14c8:	468e      	mov	lr, r1
 80a14ca:	e60d      	b.n	80a10e8 <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a14cc <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a14cc:	8843      	ldrh	r3, [r0, #2]
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a14ce:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a14d0:	428b      	cmp	r3, r1
 80a14d2:	d945      	bls.n	80a1560 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a14d4:	7a05      	ldrb	r5, [r0, #8]
 80a14d6:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a14da:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a14de:	b2d6      	uxtb	r6, r2
 80a14e0:	b145      	cbz	r5, 80a14f4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
 80a14e2:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
 80a14e4:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
 80a14e6:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a14e8:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a14ec:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a14f0:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a14f4:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a14f8:	68c7      	ldr	r7, [r0, #12]
 80a14fa:	f1bc 0f06 	cmp.w	ip, #6
 80a14fe:	bf0c      	ite	eq
 80a1500:	2504      	moveq	r5, #4
 80a1502:	2503      	movne	r5, #3
 80a1504:	4369      	muls	r1, r5
 80a1506:	f1bc 0f08 	cmp.w	ip, #8
 80a150a:	eb07 0501 	add.w	r5, r7, r1
 80a150e:	d824      	bhi.n	80a155a <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
 80a1510:	f04f 0e01 	mov.w	lr, #1
 80a1514:	fa0e fe0c 	lsl.w	lr, lr, ip
 80a1518:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
 80a151c:	d10c      	bne.n	80a1538 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
 80a151e:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80a1522:	d10d      	bne.n	80a1540 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
 80a1524:	f01e 0f10 	tst.w	lr, #16
 80a1528:	d017      	beq.n	80a155a <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a152a:	2bff      	cmp	r3, #255	; 0xff
 80a152c:	bf08      	it	eq
 80a152e:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
 80a1530:	547b      	strb	r3, [r7, r1]
          *p++ = b;
 80a1532:	706e      	strb	r6, [r5, #1]
          *p = g;
 80a1534:	70ac      	strb	r4, [r5, #2]
        } break;
 80a1536:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a1538:	547c      	strb	r4, [r7, r1]
          *p++ = r;
 80a153a:	706b      	strb	r3, [r5, #1]
          *p = b;
 80a153c:	70ae      	strb	r6, [r5, #2]
        } break;
 80a153e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
 80a1540:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a1542:	706c      	strb	r4, [r5, #1]
          *p++ = b;
 80a1544:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1546:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a1548:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a154a:	b90b      	cbnz	r3, 80a1550 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a154c:	b2d2      	uxtb	r2, r2
 80a154e:	e002      	b.n	80a1556 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1550:	435a      	muls	r2, r3
 80a1552:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a1556:	70ea      	strb	r2, [r5, #3]
        } break;
 80a1558:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a155a:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a155c:	706c      	strb	r4, [r5, #1]
          *p = b;
 80a155e:	70ae      	strb	r6, [r5, #2]
 80a1560:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1562 <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a1562:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a1566:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a156a:	4770      	bx	lr

080a156c <_ZNK17Adafruit_NeoPixel9numPixelsEv>:
 80a156c:	8840      	ldrh	r0, [r0, #2]
 80a156e:	4770      	bx	lr

080a1570 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a1570:	1c4a      	adds	r2, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
 80a1572:	7a03      	ldrb	r3, [r0, #8]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a1574:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
 80a1576:	429a      	cmp	r2, r3
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
 80a1578:	b570      	push	{r4, r5, r6, lr}
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
 80a157a:	d01e      	beq.n	80a15ba <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
 80a157c:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a157e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a1582:	68c4      	ldr	r4, [r0, #12]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a1584:	d00c      	beq.n	80a15a0 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
 80a1586:	29ff      	cmp	r1, #255	; 0xff
 80a1588:	bf0f      	iteee	eq
 80a158a:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a158e:	0211      	lslne	r1, r2, #8
 80a1590:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 80a1594:	fb91 f3f3 	sdivne	r3, r1, r3
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
 80a1598:	bf0c      	ite	eq
 80a159a:	fb91 f3f3 	sdiveq	r3, r1, r3
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a159e:	b29b      	uxthne	r3, r3
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a15a0:	4625      	mov	r5, r4
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a15a2:	1b29      	subs	r1, r5, r4
 80a15a4:	8886      	ldrh	r6, [r0, #4]
 80a15a6:	b289      	uxth	r1, r1
 80a15a8:	428e      	cmp	r6, r1
 80a15aa:	d905      	bls.n	80a15b8 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
 80a15ac:	7829      	ldrb	r1, [r5, #0]
      *ptr++ = (c * scale) >> 8;
 80a15ae:	4359      	muls	r1, r3
 80a15b0:	1209      	asrs	r1, r1, #8
 80a15b2:	f805 1b01 	strb.w	r1, [r5], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a15b6:	e7f4      	b.n	80a15a2 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
 80a15b8:	7202      	strb	r2, [r0, #8]
 80a15ba:	bd70      	pop	{r4, r5, r6, pc}

080a15bc <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a15bc:	b508      	push	{r3, lr}
 80a15be:	f000 f82f 	bl	80a1620 <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a15c2:	f000 f82d 	bl	80a1620 <HAL_Pin_Map>
 80a15c6:	4b01      	ldr	r3, [pc, #4]	; (80a15cc <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a15c8:	6018      	str	r0, [r3, #0]
 80a15ca:	bd08      	pop	{r3, pc}
 80a15cc:	20000390 	.word	0x20000390

080a15d0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a15d0:	b508      	push	{r3, lr}
 80a15d2:	4b02      	ldr	r3, [pc, #8]	; (80a15dc <os_mutex_create+0xc>)
 80a15d4:	681b      	ldr	r3, [r3, #0]
 80a15d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a15d8:	9301      	str	r3, [sp, #4]
 80a15da:	bd08      	pop	{r3, pc}
 80a15dc:	080601d0 	.word	0x080601d0

080a15e0 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80a15e0:	b508      	push	{r3, lr}
 80a15e2:	4b02      	ldr	r3, [pc, #8]	; (80a15ec <HAL_Core_Get_Last_Reset_Info+0xc>)
 80a15e4:	681b      	ldr	r3, [r3, #0]
 80a15e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a15e8:	9301      	str	r3, [sp, #4]
 80a15ea:	bd08      	pop	{r3, pc}
 80a15ec:	080601b8 	.word	0x080601b8

080a15f0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a15f0:	b508      	push	{r3, lr}
 80a15f2:	4b02      	ldr	r3, [pc, #8]	; (80a15fc <HAL_RNG_GetRandomNumber+0xc>)
 80a15f4:	681b      	ldr	r3, [r3, #0]
 80a15f6:	685b      	ldr	r3, [r3, #4]
 80a15f8:	9301      	str	r3, [sp, #4]
 80a15fa:	bd08      	pop	{r3, pc}
 80a15fc:	0806019c 	.word	0x0806019c

080a1600 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a1600:	b508      	push	{r3, lr}
 80a1602:	4b02      	ldr	r3, [pc, #8]	; (80a160c <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a1604:	681b      	ldr	r3, [r3, #0]
 80a1606:	691b      	ldr	r3, [r3, #16]
 80a1608:	9301      	str	r3, [sp, #4]
 80a160a:	bd08      	pop	{r3, pc}
 80a160c:	0806019c 	.word	0x0806019c

080a1610 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1610:	b508      	push	{r3, lr}
 80a1612:	4b02      	ldr	r3, [pc, #8]	; (80a161c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1614:	681b      	ldr	r3, [r3, #0]
 80a1616:	695b      	ldr	r3, [r3, #20]
 80a1618:	9301      	str	r3, [sp, #4]
 80a161a:	bd08      	pop	{r3, pc}
 80a161c:	0806019c 	.word	0x0806019c

080a1620 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a1620:	b508      	push	{r3, lr}
 80a1622:	4b02      	ldr	r3, [pc, #8]	; (80a162c <HAL_Pin_Map+0xc>)
 80a1624:	681b      	ldr	r3, [r3, #0]
 80a1626:	681b      	ldr	r3, [r3, #0]
 80a1628:	9301      	str	r3, [sp, #4]
 80a162a:	bd08      	pop	{r3, pc}
 80a162c:	080601b0 	.word	0x080601b0

080a1630 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1630:	b508      	push	{r3, lr}
 80a1632:	4b02      	ldr	r3, [pc, #8]	; (80a163c <HAL_Pin_Mode+0xc>)
 80a1634:	681b      	ldr	r3, [r3, #0]
 80a1636:	689b      	ldr	r3, [r3, #8]
 80a1638:	9301      	str	r3, [sp, #4]
 80a163a:	bd08      	pop	{r3, pc}
 80a163c:	080601b0 	.word	0x080601b0

080a1640 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1640:	b508      	push	{r3, lr}
 80a1642:	4b02      	ldr	r3, [pc, #8]	; (80a164c <HAL_Get_Pin_Mode+0xc>)
 80a1644:	681b      	ldr	r3, [r3, #0]
 80a1646:	68db      	ldr	r3, [r3, #12]
 80a1648:	9301      	str	r3, [sp, #4]
 80a164a:	bd08      	pop	{r3, pc}
 80a164c:	080601b0 	.word	0x080601b0

080a1650 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1650:	b508      	push	{r3, lr}
 80a1652:	4b02      	ldr	r3, [pc, #8]	; (80a165c <HAL_GPIO_Write+0xc>)
 80a1654:	681b      	ldr	r3, [r3, #0]
 80a1656:	691b      	ldr	r3, [r3, #16]
 80a1658:	9301      	str	r3, [sp, #4]
 80a165a:	bd08      	pop	{r3, pc}
 80a165c:	080601b0 	.word	0x080601b0

080a1660 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1660:	b508      	push	{r3, lr}
 80a1662:	4b02      	ldr	r3, [pc, #8]	; (80a166c <HAL_I2C_Write_Data+0xc>)
 80a1664:	681b      	ldr	r3, [r3, #0]
 80a1666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1668:	9301      	str	r3, [sp, #4]
 80a166a:	bd08      	pop	{r3, pc}
 80a166c:	080601ac 	.word	0x080601ac

080a1670 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1670:	b508      	push	{r3, lr}
 80a1672:	4b02      	ldr	r3, [pc, #8]	; (80a167c <HAL_I2C_Available_Data+0xc>)
 80a1674:	681b      	ldr	r3, [r3, #0]
 80a1676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1678:	9301      	str	r3, [sp, #4]
 80a167a:	bd08      	pop	{r3, pc}
 80a167c:	080601ac 	.word	0x080601ac

080a1680 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1680:	b508      	push	{r3, lr}
 80a1682:	4b02      	ldr	r3, [pc, #8]	; (80a168c <HAL_I2C_Read_Data+0xc>)
 80a1684:	681b      	ldr	r3, [r3, #0]
 80a1686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1688:	9301      	str	r3, [sp, #4]
 80a168a:	bd08      	pop	{r3, pc}
 80a168c:	080601ac 	.word	0x080601ac

080a1690 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1690:	b508      	push	{r3, lr}
 80a1692:	4b02      	ldr	r3, [pc, #8]	; (80a169c <HAL_I2C_Peek_Data+0xc>)
 80a1694:	681b      	ldr	r3, [r3, #0]
 80a1696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1698:	9301      	str	r3, [sp, #4]
 80a169a:	bd08      	pop	{r3, pc}
 80a169c:	080601ac 	.word	0x080601ac

080a16a0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a16a0:	b508      	push	{r3, lr}
 80a16a2:	4b02      	ldr	r3, [pc, #8]	; (80a16ac <HAL_I2C_Flush_Data+0xc>)
 80a16a4:	681b      	ldr	r3, [r3, #0]
 80a16a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a16a8:	9301      	str	r3, [sp, #4]
 80a16aa:	bd08      	pop	{r3, pc}
 80a16ac:	080601ac 	.word	0x080601ac

080a16b0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a16b0:	b508      	push	{r3, lr}
 80a16b2:	4b02      	ldr	r3, [pc, #8]	; (80a16bc <HAL_I2C_Is_Enabled+0xc>)
 80a16b4:	681b      	ldr	r3, [r3, #0]
 80a16b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a16b8:	9301      	str	r3, [sp, #4]
 80a16ba:	bd08      	pop	{r3, pc}
 80a16bc:	080601ac 	.word	0x080601ac

080a16c0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a16c0:	b508      	push	{r3, lr}
 80a16c2:	4b03      	ldr	r3, [pc, #12]	; (80a16d0 <HAL_I2C_Init+0x10>)
 80a16c4:	681b      	ldr	r3, [r3, #0]
 80a16c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a16ca:	9301      	str	r3, [sp, #4]
 80a16cc:	bd08      	pop	{r3, pc}
 80a16ce:	0000      	.short	0x0000
 80a16d0:	080601ac 	.word	0x080601ac

080a16d4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a16d4:	b508      	push	{r3, lr}
 80a16d6:	4b02      	ldr	r3, [pc, #8]	; (80a16e0 <HAL_SPI_Init+0xc>)
 80a16d8:	681b      	ldr	r3, [r3, #0]
 80a16da:	69db      	ldr	r3, [r3, #28]
 80a16dc:	9301      	str	r3, [sp, #4]
 80a16de:	bd08      	pop	{r3, pc}
 80a16e0:	080601b4 	.word	0x080601b4

080a16e4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a16e4:	b508      	push	{r3, lr}
 80a16e6:	4b02      	ldr	r3, [pc, #8]	; (80a16f0 <HAL_SPI_Is_Enabled+0xc>)
 80a16e8:	681b      	ldr	r3, [r3, #0]
 80a16ea:	6a1b      	ldr	r3, [r3, #32]
 80a16ec:	9301      	str	r3, [sp, #4]
 80a16ee:	bd08      	pop	{r3, pc}
 80a16f0:	080601b4 	.word	0x080601b4

080a16f4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a16f4:	b508      	push	{r3, lr}
 80a16f6:	4b02      	ldr	r3, [pc, #8]	; (80a1700 <HAL_USART_Init+0xc>)
 80a16f8:	681b      	ldr	r3, [r3, #0]
 80a16fa:	699b      	ldr	r3, [r3, #24]
 80a16fc:	9301      	str	r3, [sp, #4]
 80a16fe:	bd08      	pop	{r3, pc}
 80a1700:	080601c4 	.word	0x080601c4

080a1704 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1704:	b508      	push	{r3, lr}
 80a1706:	4b02      	ldr	r3, [pc, #8]	; (80a1710 <HAL_USART_Write_Data+0xc>)
 80a1708:	681b      	ldr	r3, [r3, #0]
 80a170a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a170c:	9301      	str	r3, [sp, #4]
 80a170e:	bd08      	pop	{r3, pc}
 80a1710:	080601c4 	.word	0x080601c4

080a1714 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1714:	b508      	push	{r3, lr}
 80a1716:	4b02      	ldr	r3, [pc, #8]	; (80a1720 <HAL_USART_Available_Data+0xc>)
 80a1718:	681b      	ldr	r3, [r3, #0]
 80a171a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a171c:	9301      	str	r3, [sp, #4]
 80a171e:	bd08      	pop	{r3, pc}
 80a1720:	080601c4 	.word	0x080601c4

080a1724 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1724:	b508      	push	{r3, lr}
 80a1726:	4b02      	ldr	r3, [pc, #8]	; (80a1730 <HAL_USART_Read_Data+0xc>)
 80a1728:	681b      	ldr	r3, [r3, #0]
 80a172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a172c:	9301      	str	r3, [sp, #4]
 80a172e:	bd08      	pop	{r3, pc}
 80a1730:	080601c4 	.word	0x080601c4

080a1734 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1734:	b508      	push	{r3, lr}
 80a1736:	4b02      	ldr	r3, [pc, #8]	; (80a1740 <HAL_USART_Peek_Data+0xc>)
 80a1738:	681b      	ldr	r3, [r3, #0]
 80a173a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a173c:	9301      	str	r3, [sp, #4]
 80a173e:	bd08      	pop	{r3, pc}
 80a1740:	080601c4 	.word	0x080601c4

080a1744 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1744:	b508      	push	{r3, lr}
 80a1746:	4b02      	ldr	r3, [pc, #8]	; (80a1750 <HAL_USART_Flush_Data+0xc>)
 80a1748:	681b      	ldr	r3, [r3, #0]
 80a174a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a174c:	9301      	str	r3, [sp, #4]
 80a174e:	bd08      	pop	{r3, pc}
 80a1750:	080601c4 	.word	0x080601c4

080a1754 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1754:	b508      	push	{r3, lr}
 80a1756:	4b02      	ldr	r3, [pc, #8]	; (80a1760 <HAL_USART_Is_Enabled+0xc>)
 80a1758:	681b      	ldr	r3, [r3, #0]
 80a175a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a175c:	9301      	str	r3, [sp, #4]
 80a175e:	bd08      	pop	{r3, pc}
 80a1760:	080601c4 	.word	0x080601c4

080a1764 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1764:	b508      	push	{r3, lr}
 80a1766:	4b02      	ldr	r3, [pc, #8]	; (80a1770 <HAL_USART_Available_Data_For_Write+0xc>)
 80a1768:	681b      	ldr	r3, [r3, #0]
 80a176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a176c:	9301      	str	r3, [sp, #4]
 80a176e:	bd08      	pop	{r3, pc}
 80a1770:	080601c4 	.word	0x080601c4

080a1774 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1774:	b508      	push	{r3, lr}
 80a1776:	4b02      	ldr	r3, [pc, #8]	; (80a1780 <HAL_USB_USART_Init+0xc>)
 80a1778:	681b      	ldr	r3, [r3, #0]
 80a177a:	681b      	ldr	r3, [r3, #0]
 80a177c:	9301      	str	r3, [sp, #4]
 80a177e:	bd08      	pop	{r3, pc}
 80a1780:	080601d8 	.word	0x080601d8

080a1784 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1784:	b508      	push	{r3, lr}
 80a1786:	4b02      	ldr	r3, [pc, #8]	; (80a1790 <HAL_USB_USART_Available_Data+0xc>)
 80a1788:	681b      	ldr	r3, [r3, #0]
 80a178a:	691b      	ldr	r3, [r3, #16]
 80a178c:	9301      	str	r3, [sp, #4]
 80a178e:	bd08      	pop	{r3, pc}
 80a1790:	080601d8 	.word	0x080601d8

080a1794 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1794:	b508      	push	{r3, lr}
 80a1796:	4b02      	ldr	r3, [pc, #8]	; (80a17a0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1798:	681b      	ldr	r3, [r3, #0]
 80a179a:	695b      	ldr	r3, [r3, #20]
 80a179c:	9301      	str	r3, [sp, #4]
 80a179e:	bd08      	pop	{r3, pc}
 80a17a0:	080601d8 	.word	0x080601d8

080a17a4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a17a4:	b508      	push	{r3, lr}
 80a17a6:	4b02      	ldr	r3, [pc, #8]	; (80a17b0 <HAL_USB_USART_Receive_Data+0xc>)
 80a17a8:	681b      	ldr	r3, [r3, #0]
 80a17aa:	699b      	ldr	r3, [r3, #24]
 80a17ac:	9301      	str	r3, [sp, #4]
 80a17ae:	bd08      	pop	{r3, pc}
 80a17b0:	080601d8 	.word	0x080601d8

080a17b4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a17b4:	b508      	push	{r3, lr}
 80a17b6:	4b02      	ldr	r3, [pc, #8]	; (80a17c0 <HAL_USB_USART_Send_Data+0xc>)
 80a17b8:	681b      	ldr	r3, [r3, #0]
 80a17ba:	69db      	ldr	r3, [r3, #28]
 80a17bc:	9301      	str	r3, [sp, #4]
 80a17be:	bd08      	pop	{r3, pc}
 80a17c0:	080601d8 	.word	0x080601d8

080a17c4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a17c4:	b508      	push	{r3, lr}
 80a17c6:	4b02      	ldr	r3, [pc, #8]	; (80a17d0 <HAL_USB_USART_Flush_Data+0xc>)
 80a17c8:	681b      	ldr	r3, [r3, #0]
 80a17ca:	6a1b      	ldr	r3, [r3, #32]
 80a17cc:	9301      	str	r3, [sp, #4]
 80a17ce:	bd08      	pop	{r3, pc}
 80a17d0:	080601d8 	.word	0x080601d8

080a17d4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a17d4:	b508      	push	{r3, lr}
 80a17d6:	4b02      	ldr	r3, [pc, #8]	; (80a17e0 <set_system_mode+0xc>)
 80a17d8:	681b      	ldr	r3, [r3, #0]
 80a17da:	685b      	ldr	r3, [r3, #4]
 80a17dc:	9301      	str	r3, [sp, #4]
 80a17de:	bd08      	pop	{r3, pc}
 80a17e0:	080601a4 	.word	0x080601a4

080a17e4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a17e4:	b508      	push	{r3, lr}
 80a17e6:	4b02      	ldr	r3, [pc, #8]	; (80a17f0 <system_delay_ms+0xc>)
 80a17e8:	681b      	ldr	r3, [r3, #0]
 80a17ea:	695b      	ldr	r3, [r3, #20]
 80a17ec:	9301      	str	r3, [sp, #4]
 80a17ee:	bd08      	pop	{r3, pc}
 80a17f0:	080601a4 	.word	0x080601a4

080a17f4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a17f4:	b508      	push	{r3, lr}
 80a17f6:	4b03      	ldr	r3, [pc, #12]	; (80a1804 <system_ctrl_set_app_request_handler+0x10>)
 80a17f8:	681b      	ldr	r3, [r3, #0]
 80a17fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a17fe:	9301      	str	r3, [sp, #4]
 80a1800:	bd08      	pop	{r3, pc}
 80a1802:	0000      	.short	0x0000
 80a1804:	080601a4 	.word	0x080601a4

080a1808 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1808:	b508      	push	{r3, lr}
 80a180a:	4b03      	ldr	r3, [pc, #12]	; (80a1818 <system_ctrl_set_result+0x10>)
 80a180c:	681b      	ldr	r3, [r3, #0]
 80a180e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1812:	9301      	str	r3, [sp, #4]
 80a1814:	bd08      	pop	{r3, pc}
 80a1816:	0000      	.short	0x0000
 80a1818:	080601a4 	.word	0x080601a4

080a181c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a181c:	b508      	push	{r3, lr}
 80a181e:	4b02      	ldr	r3, [pc, #8]	; (80a1828 <spark_variable+0xc>)
 80a1820:	681b      	ldr	r3, [r3, #0]
 80a1822:	681b      	ldr	r3, [r3, #0]
 80a1824:	9301      	str	r3, [sp, #4]
 80a1826:	bd08      	pop	{r3, pc}
 80a1828:	080601cc 	.word	0x080601cc

080a182c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a182c:	b508      	push	{r3, lr}
 80a182e:	4b02      	ldr	r3, [pc, #8]	; (80a1838 <spark_function+0xc>)
 80a1830:	681b      	ldr	r3, [r3, #0]
 80a1832:	685b      	ldr	r3, [r3, #4]
 80a1834:	9301      	str	r3, [sp, #4]
 80a1836:	bd08      	pop	{r3, pc}
 80a1838:	080601cc 	.word	0x080601cc

080a183c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a183c:	b508      	push	{r3, lr}
 80a183e:	4b02      	ldr	r3, [pc, #8]	; (80a1848 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1840:	681b      	ldr	r3, [r3, #0]
 80a1842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1844:	9301      	str	r3, [sp, #4]
 80a1846:	bd08      	pop	{r3, pc}
 80a1848:	080601cc 	.word	0x080601cc

080a184c <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a184c:	b508      	push	{r3, lr}
 80a184e:	4b02      	ldr	r3, [pc, #8]	; (80a1858 <network_ready+0xc>)
 80a1850:	681b      	ldr	r3, [r3, #0]
 80a1852:	691b      	ldr	r3, [r3, #16]
 80a1854:	9301      	str	r3, [sp, #4]
 80a1856:	bd08      	pop	{r3, pc}
 80a1858:	080601c8 	.word	0x080601c8

080a185c <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a185c:	b508      	push	{r3, lr}
 80a185e:	4b02      	ldr	r3, [pc, #8]	; (80a1868 <malloc+0xc>)
 80a1860:	681b      	ldr	r3, [r3, #0]
 80a1862:	681b      	ldr	r3, [r3, #0]
 80a1864:	9301      	str	r3, [sp, #4]
 80a1866:	bd08      	pop	{r3, pc}
 80a1868:	080601a0 	.word	0x080601a0

080a186c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a186c:	b508      	push	{r3, lr}
 80a186e:	4b02      	ldr	r3, [pc, #8]	; (80a1878 <free+0xc>)
 80a1870:	681b      	ldr	r3, [r3, #0]
 80a1872:	685b      	ldr	r3, [r3, #4]
 80a1874:	9301      	str	r3, [sp, #4]
 80a1876:	bd08      	pop	{r3, pc}
 80a1878:	080601a0 	.word	0x080601a0

080a187c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a187c:	b508      	push	{r3, lr}
 80a187e:	4b02      	ldr	r3, [pc, #8]	; (80a1888 <realloc+0xc>)
 80a1880:	681b      	ldr	r3, [r3, #0]
 80a1882:	689b      	ldr	r3, [r3, #8]
 80a1884:	9301      	str	r3, [sp, #4]
 80a1886:	bd08      	pop	{r3, pc}
 80a1888:	080601a0 	.word	0x080601a0

080a188c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a188c:	2100      	movs	r1, #0
 80a188e:	f7ff bfa9 	b.w	80a17e4 <system_delay_ms>

080a1892 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1892:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1894:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1896:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a1898:	b113      	cbz	r3, 80a18a0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a189a:	2203      	movs	r2, #3
 80a189c:	4601      	mov	r1, r0
 80a189e:	4798      	blx	r3
    }
 80a18a0:	4620      	mov	r0, r4
 80a18a2:	bd10      	pop	{r4, pc}

080a18a4 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}
#endif
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a18a4:	b510      	push	{r4, lr}
 80a18a6:	b088      	sub	sp, #32
 80a18a8:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a18aa:	4668      	mov	r0, sp
 80a18ac:	f000 f97a 	bl	80a1ba4 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a18b0:	4669      	mov	r1, sp
 80a18b2:	a804      	add	r0, sp, #16
 80a18b4:	f000 f998 	bl	80a1be8 <_ZN6StringC1ERKS_>
 80a18b8:	a804      	add	r0, sp, #16
 80a18ba:	47a0      	blx	r4
 80a18bc:	4604      	mov	r4, r0
 80a18be:	a804      	add	r0, sp, #16
 80a18c0:	f000 f929 	bl	80a1b16 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a18c4:	4668      	mov	r0, sp
 80a18c6:	f000 f926 	bl	80a1b16 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a18ca:	4620      	mov	r0, r4
 80a18cc:	b008      	add	sp, #32
 80a18ce:	bd10      	pop	{r4, pc}

080a18d0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a18d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a18d2:	4607      	mov	r7, r0
 80a18d4:	460e      	mov	r6, r1
 80a18d6:	4615      	mov	r5, r2
 80a18d8:	b085      	sub	sp, #20
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
 80a18da:	2410      	movs	r4, #16
 80a18dc:	4622      	mov	r2, r4
 80a18de:	2100      	movs	r1, #0
 80a18e0:	4668      	mov	r0, sp
 80a18e2:	f000 fda0 	bl	80a2426 <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a18e6:	2200      	movs	r2, #0
 80a18e8:	4669      	mov	r1, sp
 80a18ea:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
 80a18ec:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
 80a18f0:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a18f2:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a18f4:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a18f6:	f7ff ff99 	bl	80a182c <spark_function>
}
 80a18fa:	b005      	add	sp, #20
 80a18fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a18fe <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a18fe:	4770      	bx	lr

080a1900 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1902:	4606      	mov	r6, r0
 80a1904:	4615      	mov	r5, r2
 80a1906:	460c      	mov	r4, r1
 80a1908:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a190a:	42bc      	cmp	r4, r7
 80a190c:	d006      	beq.n	80a191c <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a190e:	6833      	ldr	r3, [r6, #0]
 80a1910:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1914:	689b      	ldr	r3, [r3, #8]
 80a1916:	4630      	mov	r0, r6
 80a1918:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a191a:	e7f6      	b.n	80a190a <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a191c:	4628      	mov	r0, r5
 80a191e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1920 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1920:	2200      	movs	r2, #0
 80a1922:	7c00      	ldrb	r0, [r0, #16]
 80a1924:	f7ff be9c 	b.w	80a1660 <HAL_I2C_Write_Data>

080a1928 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1928:	2100      	movs	r1, #0
 80a192a:	7c00      	ldrb	r0, [r0, #16]
 80a192c:	f7ff bea0 	b.w	80a1670 <HAL_I2C_Available_Data>

080a1930 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1930:	2100      	movs	r1, #0
 80a1932:	7c00      	ldrb	r0, [r0, #16]
 80a1934:	f7ff bea4 	b.w	80a1680 <HAL_I2C_Read_Data>

080a1938 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1938:	2100      	movs	r1, #0
 80a193a:	7c00      	ldrb	r0, [r0, #16]
 80a193c:	f7ff bea8 	b.w	80a1690 <HAL_I2C_Peek_Data>

080a1940 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1940:	2100      	movs	r1, #0
 80a1942:	7c00      	ldrb	r0, [r0, #16]
 80a1944:	f7ff beac 	b.w	80a16a0 <HAL_I2C_Flush_Data>

080a1948 <_ZN7TwoWireD0Ev>:
 80a1948:	b510      	push	{r4, lr}
 80a194a:	4604      	mov	r4, r0
 80a194c:	f7fe fba5 	bl	80a009a <_ZdlPv>
 80a1950:	4620      	mov	r0, r4
 80a1952:	bd10      	pop	{r4, pc}

080a1954 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1954:	b510      	push	{r4, lr}
 80a1956:	4604      	mov	r4, r0
 80a1958:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a195a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a195e:	60a3      	str	r3, [r4, #8]
 80a1960:	4b04      	ldr	r3, [pc, #16]	; (80a1974 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1962:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1964:	7420      	strb	r0, [r4, #16]
 80a1966:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1968:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a196a:	f7ff fea9 	bl	80a16c0 <HAL_I2C_Init>

}
 80a196e:	4620      	mov	r0, r4
 80a1970:	bd10      	pop	{r4, pc}
 80a1972:	bf00      	nop
 80a1974:	080a2620 	.word	0x080a2620

080a1978 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1978:	2100      	movs	r1, #0
 80a197a:	7c00      	ldrb	r0, [r0, #16]
 80a197c:	f7ff be98 	b.w	80a16b0 <HAL_I2C_Is_Enabled>

080a1980 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1980:	4770      	bx	lr

080a1982 <_ZN9IPAddressD0Ev>:
 80a1982:	b510      	push	{r4, lr}
 80a1984:	4604      	mov	r4, r0
 80a1986:	f7fe fb88 	bl	80a009a <_ZdlPv>
 80a198a:	4620      	mov	r0, r4
 80a198c:	bd10      	pop	{r4, pc}

080a198e <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a198e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1990:	460f      	mov	r7, r1
 80a1992:	f100 0608 	add.w	r6, r0, #8
 80a1996:	1d05      	adds	r5, r0, #4
 80a1998:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a199a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a199e:	220a      	movs	r2, #10
 80a19a0:	4638      	mov	r0, r7
 80a19a2:	f000 f882 	bl	80a1aaa <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a19a6:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a19a8:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a19aa:	d007      	beq.n	80a19bc <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a19ac:	2c00      	cmp	r4, #0
 80a19ae:	d0f4      	beq.n	80a199a <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a19b0:	212e      	movs	r1, #46	; 0x2e
 80a19b2:	4638      	mov	r0, r7
 80a19b4:	f000 f84c 	bl	80a1a50 <_ZN5Print5printEc>
 80a19b8:	4404      	add	r4, r0
 80a19ba:	e7ee      	b.n	80a199a <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a19bc:	4620      	mov	r0, r4
 80a19be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a19c0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a19c0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a19c2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a19c6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a19ca:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a19ce:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a19d2:	2304      	movs	r3, #4
 80a19d4:	6041      	str	r1, [r0, #4]
 80a19d6:	7503      	strb	r3, [r0, #20]
 80a19d8:	bd10      	pop	{r4, pc}
	...

080a19dc <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a19dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a19de:	4d04      	ldr	r5, [pc, #16]	; (80a19f0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a19e0:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a19e2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a19e6:	9500      	str	r5, [sp, #0]
 80a19e8:	f7ff ffea 	bl	80a19c0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a19ec:	b003      	add	sp, #12
 80a19ee:	bd30      	pop	{r4, r5, pc}
 80a19f0:	080a2648 	.word	0x080a2648

080a19f4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a19f4:	4a01      	ldr	r2, [pc, #4]	; (80a19fc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a19f6:	4b02      	ldr	r3, [pc, #8]	; (80a1a00 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a19f8:	601a      	str	r2, [r3, #0]
 80a19fa:	4770      	bx	lr
 80a19fc:	080a270f 	.word	0x080a270f
 80a1a00:	20000394 	.word	0x20000394

080a1a04 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1a06:	4606      	mov	r6, r0
 80a1a08:	460d      	mov	r5, r1
 80a1a0a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1a0c:	2400      	movs	r4, #0
  while (size--) {
 80a1a0e:	42bd      	cmp	r5, r7
 80a1a10:	d00c      	beq.n	80a1a2c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1a12:	6833      	ldr	r3, [r6, #0]
 80a1a14:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1a18:	689b      	ldr	r3, [r3, #8]
 80a1a1a:	4630      	mov	r0, r6
 80a1a1c:	4798      	blx	r3
     if (chunk>=0)
 80a1a1e:	2800      	cmp	r0, #0
 80a1a20:	db01      	blt.n	80a1a26 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1a22:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1a24:	e7f3      	b.n	80a1a0e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1a26:	2c00      	cmp	r4, #0
 80a1a28:	bf08      	it	eq
 80a1a2a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1a2c:	4620      	mov	r0, r4
 80a1a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1a30 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1a30:	b570      	push	{r4, r5, r6, lr}
 80a1a32:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1a34:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1a36:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1a38:	b149      	cbz	r1, 80a1a4e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1a3a:	f000 fd25 	bl	80a2488 <strlen>
 80a1a3e:	682b      	ldr	r3, [r5, #0]
 80a1a40:	4602      	mov	r2, r0
 80a1a42:	4621      	mov	r1, r4
 80a1a44:	4628      	mov	r0, r5
    }
 80a1a46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1a4a:	68db      	ldr	r3, [r3, #12]
 80a1a4c:	4718      	bx	r3
    }
 80a1a4e:	bd70      	pop	{r4, r5, r6, pc}

080a1a50 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1a50:	6803      	ldr	r3, [r0, #0]
 80a1a52:	689b      	ldr	r3, [r3, #8]
 80a1a54:	4718      	bx	r3

080a1a56 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1a56:	2a01      	cmp	r2, #1
 80a1a58:	bf98      	it	ls
 80a1a5a:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1a5c:	b530      	push	{r4, r5, lr}
 80a1a5e:	460b      	mov	r3, r1
 80a1a60:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1a62:	2100      	movs	r1, #0
 80a1a64:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1a68:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1a6c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1a70:	fb05 3312 	mls	r3, r5, r2, r3
 80a1a74:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1a76:	2b09      	cmp	r3, #9
 80a1a78:	bf94      	ite	ls
 80a1a7a:	3330      	addls	r3, #48	; 0x30
 80a1a7c:	3337      	addhi	r3, #55	; 0x37
 80a1a7e:	b2db      	uxtb	r3, r3
 80a1a80:	4621      	mov	r1, r4
 80a1a82:	f804 3901 	strb.w	r3, [r4], #-1
 80a1a86:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1a88:	2d00      	cmp	r5, #0
 80a1a8a:	d1ef      	bne.n	80a1a6c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1a8c:	f7ff ffd0 	bl	80a1a30 <_ZN5Print5writeEPKc>
}
 80a1a90:	b00b      	add	sp, #44	; 0x2c
 80a1a92:	bd30      	pop	{r4, r5, pc}

080a1a94 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1a94:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1a96:	b922      	cbnz	r2, 80a1aa2 <_ZN5Print5printEmi+0xe>
 80a1a98:	6803      	ldr	r3, [r0, #0]
 80a1a9a:	b2c9      	uxtb	r1, r1
 80a1a9c:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1a9e:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1aa0:	4718      	bx	r3
  else return printNumber(n, base);
 80a1aa2:	b2d2      	uxtb	r2, r2
}
 80a1aa4:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1aa6:	f7ff bfd6 	b.w	80a1a56 <_ZN5Print11printNumberEmh>

080a1aaa <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1aaa:	f7ff bff3 	b.w	80a1a94 <_ZN5Print5printEmi>

080a1aae <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1aae:	b510      	push	{r4, lr}
 80a1ab0:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1ab2:	f7ff feee 	bl	80a1892 <_ZNSt14_Function_baseD1Ev>
 80a1ab6:	4620      	mov	r0, r4
 80a1ab8:	bd10      	pop	{r4, pc}
	...

080a1abc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1abc:	4803      	ldr	r0, [pc, #12]	; (80a1acc <_GLOBAL__sub_I_RGB+0x10>)
 80a1abe:	2300      	movs	r3, #0
 80a1ac0:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1ac2:	4a03      	ldr	r2, [pc, #12]	; (80a1ad0 <_GLOBAL__sub_I_RGB+0x14>)
 80a1ac4:	4903      	ldr	r1, [pc, #12]	; (80a1ad4 <_GLOBAL__sub_I_RGB+0x18>)
 80a1ac6:	f000 bb43 	b.w	80a2150 <__aeabi_atexit>
 80a1aca:	bf00      	nop
 80a1acc:	20000398 	.word	0x20000398
 80a1ad0:	20000370 	.word	0x20000370
 80a1ad4:	080a1aaf 	.word	0x080a1aaf

080a1ad8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1ad8:	4770      	bx	lr

080a1ada <_ZN8SPIClassD0Ev>:
 80a1ada:	b510      	push	{r4, lr}
 80a1adc:	4604      	mov	r4, r0
 80a1ade:	f7fe fadc 	bl	80a009a <_ZdlPv>
 80a1ae2:	4620      	mov	r0, r4
 80a1ae4:	bd10      	pop	{r4, pc}
	...

080a1ae8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1ae8:	b570      	push	{r4, r5, r6, lr}
 80a1aea:	4604      	mov	r4, r0
 80a1aec:	460e      	mov	r6, r1
 80a1aee:	4b07      	ldr	r3, [pc, #28]	; (80a1b0c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a1af0:	2500      	movs	r5, #0
 80a1af2:	6003      	str	r3, [r0, #0]
 80a1af4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a1af8:	f7ff fd6a 	bl	80a15d0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1afc:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a1afe:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1b00:	f7ff fde8 	bl	80a16d4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1b04:	60a5      	str	r5, [r4, #8]
}
 80a1b06:	4620      	mov	r0, r4
 80a1b08:	bd70      	pop	{r4, r5, r6, pc}
 80a1b0a:	bf00      	nop
 80a1b0c:	080a273c 	.word	0x080a273c

080a1b10 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1b10:	7900      	ldrb	r0, [r0, #4]
 80a1b12:	f7ff bde7 	b.w	80a16e4 <HAL_SPI_Is_Enabled>

080a1b16 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1b16:	b510      	push	{r4, lr}
 80a1b18:	4604      	mov	r4, r0
{
	free(buffer);
 80a1b1a:	6800      	ldr	r0, [r0, #0]
 80a1b1c:	f7ff fea6 	bl	80a186c <free>
}
 80a1b20:	4620      	mov	r0, r4
 80a1b22:	bd10      	pop	{r4, pc}

080a1b24 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1b24:	b510      	push	{r4, lr}
 80a1b26:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1b28:	6800      	ldr	r0, [r0, #0]
 80a1b2a:	b108      	cbz	r0, 80a1b30 <_ZN6String10invalidateEv+0xc>
 80a1b2c:	f7ff fe9e 	bl	80a186c <free>
	buffer = NULL;
 80a1b30:	2300      	movs	r3, #0
 80a1b32:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a1b34:	60a3      	str	r3, [r4, #8]
 80a1b36:	6063      	str	r3, [r4, #4]
 80a1b38:	bd10      	pop	{r4, pc}

080a1b3a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1b3a:	b538      	push	{r3, r4, r5, lr}
 80a1b3c:	4604      	mov	r4, r0
 80a1b3e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1b40:	6800      	ldr	r0, [r0, #0]
 80a1b42:	3101      	adds	r1, #1
 80a1b44:	f7ff fe9a 	bl	80a187c <realloc>
	if (newbuffer) {
 80a1b48:	b110      	cbz	r0, 80a1b50 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1b4a:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a1b4e:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1b50:	bd38      	pop	{r3, r4, r5, pc}

080a1b52 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1b52:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1b54:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1b56:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1b58:	b113      	cbz	r3, 80a1b60 <_ZN6String7reserveEj+0xe>
 80a1b5a:	6843      	ldr	r3, [r0, #4]
 80a1b5c:	428b      	cmp	r3, r1
 80a1b5e:	d207      	bcs.n	80a1b70 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a1b60:	4620      	mov	r0, r4
 80a1b62:	f7ff ffea 	bl	80a1b3a <_ZN6String12changeBufferEj>
 80a1b66:	b120      	cbz	r0, 80a1b72 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a1b68:	68a3      	ldr	r3, [r4, #8]
 80a1b6a:	b90b      	cbnz	r3, 80a1b70 <_ZN6String7reserveEj+0x1e>
 80a1b6c:	6822      	ldr	r2, [r4, #0]
 80a1b6e:	7013      	strb	r3, [r2, #0]
 80a1b70:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a1b72:	bd10      	pop	{r4, pc}

080a1b74 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1b74:	b570      	push	{r4, r5, r6, lr}
 80a1b76:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1b78:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1b7a:	4604      	mov	r4, r0
 80a1b7c:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1b7e:	f7ff ffe8 	bl	80a1b52 <_ZN6String7reserveEj>
 80a1b82:	b918      	cbnz	r0, 80a1b8c <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a1b84:	4620      	mov	r0, r4
 80a1b86:	f7ff ffcd 	bl	80a1b24 <_ZN6String10invalidateEv>
		return *this;
 80a1b8a:	e009      	b.n	80a1ba0 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a1b8c:	462a      	mov	r2, r5
 80a1b8e:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a1b90:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1b92:	6820      	ldr	r0, [r4, #0]
 80a1b94:	f000 fc3c 	bl	80a2410 <memcpy>
	buffer[len] = 0;
 80a1b98:	6822      	ldr	r2, [r4, #0]
 80a1b9a:	68a3      	ldr	r3, [r4, #8]
 80a1b9c:	2100      	movs	r1, #0
 80a1b9e:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a1ba0:	4620      	mov	r0, r4
 80a1ba2:	bd70      	pop	{r4, r5, r6, pc}

080a1ba4 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1ba4:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1ba6:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1ba8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1baa:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1bac:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1bae:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1bb0:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1bb2:	460d      	mov	r5, r1
 80a1bb4:	b139      	cbz	r1, 80a1bc6 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a1bb6:	4608      	mov	r0, r1
 80a1bb8:	f000 fc66 	bl	80a2488 <strlen>
 80a1bbc:	4629      	mov	r1, r5
 80a1bbe:	4602      	mov	r2, r0
 80a1bc0:	4620      	mov	r0, r4
 80a1bc2:	f7ff ffd7 	bl	80a1b74 <_ZN6String4copyEPKcj>
}
 80a1bc6:	4620      	mov	r0, r4
 80a1bc8:	bd38      	pop	{r3, r4, r5, pc}

080a1bca <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a1bca:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a1bcc:	b510      	push	{r4, lr}
 80a1bce:	460b      	mov	r3, r1
 80a1bd0:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a1bd2:	d007      	beq.n	80a1be4 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a1bd4:	6809      	ldr	r1, [r1, #0]
 80a1bd6:	b119      	cbz	r1, 80a1be0 <_ZN6StringaSERKS_+0x16>
 80a1bd8:	689a      	ldr	r2, [r3, #8]
 80a1bda:	f7ff ffcb 	bl	80a1b74 <_ZN6String4copyEPKcj>
 80a1bde:	e001      	b.n	80a1be4 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a1be0:	f7ff ffa0 	bl	80a1b24 <_ZN6String10invalidateEv>

	return *this;
}
 80a1be4:	4620      	mov	r0, r4
 80a1be6:	bd10      	pop	{r4, pc}

080a1be8 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a1be8:	b510      	push	{r4, lr}
 80a1bea:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1bec:	2300      	movs	r3, #0
 80a1bee:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1bf0:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1bf2:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1bf4:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a1bf6:	f7ff ffe8 	bl	80a1bca <_ZN6StringaSERKS_>
}
 80a1bfa:	4620      	mov	r0, r4
 80a1bfc:	bd10      	pop	{r4, pc}

080a1bfe <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a1bfe:	6800      	ldr	r0, [r0, #0]
 80a1c00:	b108      	cbz	r0, 80a1c06 <_ZNK6String5toIntEv+0x8>
 80a1c02:	f000 bbf3 	b.w	80a23ec <atol>
	return 0;
}
 80a1c06:	4770      	bx	lr

080a1c08 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1c08:	f64f 739c 	movw	r3, #65436	; 0xff9c
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
}
 80a1c0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1c0e:	4c0d      	ldr	r4, [pc, #52]	; (80a1c44 <_GLOBAL__sub_I_System+0x3c>)
 80a1c10:	2500      	movs	r5, #0
 80a1c12:	8063      	strh	r3, [r4, #2]
 80a1c14:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1c18:	4628      	mov	r0, r5
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1c1a:	80a3      	strh	r3, [r4, #4]
 80a1c1c:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1c1e:	f7ff fdd9 	bl	80a17d4 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80a1c22:	a802      	add	r0, sp, #8
 80a1c24:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a1c28:	462a      	mov	r2, r5
 80a1c2a:	4629      	mov	r1, r5
 80a1c2c:	f7ff fcd8 	bl	80a15e0 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80a1c30:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 80a1c32:	2b1e      	cmp	r3, #30
 80a1c34:	d104      	bne.n	80a1c40 <_GLOBAL__sub_I_System+0x38>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 80a1c36:	2303      	movs	r3, #3
 80a1c38:	7023      	strb	r3, [r4, #0]
 80a1c3a:	2311      	movs	r3, #17
 80a1c3c:	8065      	strh	r5, [r4, #2]
 80a1c3e:	80a3      	strh	r3, [r4, #4]
 80a1c40:	b003      	add	sp, #12
 80a1c42:	bd30      	pop	{r4, r5, pc}
 80a1c44:	200003a8 	.word	0x200003a8

080a1c48 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1c48:	4b02      	ldr	r3, [pc, #8]	; (80a1c54 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1c4a:	681a      	ldr	r2, [r3, #0]
 80a1c4c:	4b02      	ldr	r3, [pc, #8]	; (80a1c58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1c4e:	601a      	str	r2, [r3, #0]
 80a1c50:	4770      	bx	lr
 80a1c52:	bf00      	nop
 80a1c54:	20000304 	.word	0x20000304
 80a1c58:	200003b0 	.word	0x200003b0

080a1c5c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1c5c:	4770      	bx	lr

080a1c5e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1c5e:	7441      	strb	r1, [r0, #17]
 80a1c60:	4770      	bx	lr

080a1c62 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a1c62:	7c00      	ldrb	r0, [r0, #16]
 80a1c64:	f7ff bd7e 	b.w	80a1764 <HAL_USART_Available_Data_For_Write>

080a1c68 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a1c68:	7c00      	ldrb	r0, [r0, #16]
 80a1c6a:	f7ff bd53 	b.w	80a1714 <HAL_USART_Available_Data>

080a1c6e <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a1c6e:	7c00      	ldrb	r0, [r0, #16]
 80a1c70:	f7ff bd60 	b.w	80a1734 <HAL_USART_Peek_Data>

080a1c74 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a1c74:	7c00      	ldrb	r0, [r0, #16]
 80a1c76:	f7ff bd55 	b.w	80a1724 <HAL_USART_Read_Data>

080a1c7a <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1c7a:	7c00      	ldrb	r0, [r0, #16]
 80a1c7c:	f7ff bd62 	b.w	80a1744 <HAL_USART_Flush_Data>

080a1c80 <_ZN11USARTSerialD0Ev>:
 80a1c80:	b510      	push	{r4, lr}
 80a1c82:	4604      	mov	r4, r0
 80a1c84:	f7fe fa09 	bl	80a009a <_ZdlPv>
 80a1c88:	4620      	mov	r0, r4
 80a1c8a:	bd10      	pop	{r4, pc}

080a1c8c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1c8c:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1c8e:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1c90:	4604      	mov	r4, r0
 80a1c92:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1c94:	b925      	cbnz	r5, 80a1ca0 <_ZN11USARTSerial5writeEh+0x14>
 80a1c96:	7c00      	ldrb	r0, [r0, #16]
 80a1c98:	f7ff fd64 	bl	80a1764 <HAL_USART_Available_Data_For_Write>
 80a1c9c:	2800      	cmp	r0, #0
 80a1c9e:	dd05      	ble.n	80a1cac <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1ca0:	4631      	mov	r1, r6
 80a1ca2:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1ca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1ca8:	f7ff bd2c 	b.w	80a1704 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1cac:	4628      	mov	r0, r5
 80a1cae:	bd70      	pop	{r4, r5, r6, pc}

080a1cb0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1cb0:	b510      	push	{r4, lr}
 80a1cb2:	4604      	mov	r4, r0
 80a1cb4:	4608      	mov	r0, r1
 80a1cb6:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1cb8:	2200      	movs	r2, #0
 80a1cba:	6062      	str	r2, [r4, #4]
 80a1cbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1cc0:	60a2      	str	r2, [r4, #8]
 80a1cc2:	4a05      	ldr	r2, [pc, #20]	; (80a1cd8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1cc4:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1cc6:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1cc8:	2201      	movs	r2, #1
 80a1cca:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1ccc:	461a      	mov	r2, r3
 80a1cce:	f7ff fd11 	bl	80a16f4 <HAL_USART_Init>
}
 80a1cd2:	4620      	mov	r0, r4
 80a1cd4:	bd10      	pop	{r4, pc}
 80a1cd6:	bf00      	nop
 80a1cd8:	080a2778 	.word	0x080a2778

080a1cdc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1cdc:	7c00      	ldrb	r0, [r0, #16]
 80a1cde:	f7ff bd39 	b.w	80a1754 <HAL_USART_Is_Enabled>
	...

080a1ce4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1ce4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1ce6:	4d0c      	ldr	r5, [pc, #48]	; (80a1d18 <_Z22__fetch_global_Serial1v+0x34>)
 80a1ce8:	6829      	ldr	r1, [r5, #0]
 80a1cea:	f011 0401 	ands.w	r4, r1, #1
 80a1cee:	d111      	bne.n	80a1d14 <_Z22__fetch_global_Serial1v+0x30>
 80a1cf0:	4628      	mov	r0, r5
 80a1cf2:	f7fe f9d4 	bl	80a009e <__cxa_guard_acquire>
 80a1cf6:	b168      	cbz	r0, 80a1d14 <_Z22__fetch_global_Serial1v+0x30>
 80a1cf8:	4a08      	ldr	r2, [pc, #32]	; (80a1d1c <_Z22__fetch_global_Serial1v+0x38>)
 80a1cfa:	4621      	mov	r1, r4
 80a1cfc:	4b08      	ldr	r3, [pc, #32]	; (80a1d20 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1cfe:	4809      	ldr	r0, [pc, #36]	; (80a1d24 <_Z22__fetch_global_Serial1v+0x40>)
 80a1d00:	f7ff ffd6 	bl	80a1cb0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1d04:	4628      	mov	r0, r5
 80a1d06:	f7fe f9cf 	bl	80a00a8 <__cxa_guard_release>
 80a1d0a:	4a07      	ldr	r2, [pc, #28]	; (80a1d28 <_Z22__fetch_global_Serial1v+0x44>)
 80a1d0c:	4907      	ldr	r1, [pc, #28]	; (80a1d2c <_Z22__fetch_global_Serial1v+0x48>)
 80a1d0e:	4805      	ldr	r0, [pc, #20]	; (80a1d24 <_Z22__fetch_global_Serial1v+0x40>)
 80a1d10:	f000 fa1e 	bl	80a2150 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1d14:	4803      	ldr	r0, [pc, #12]	; (80a1d24 <_Z22__fetch_global_Serial1v+0x40>)
 80a1d16:	bd38      	pop	{r3, r4, r5, pc}
 80a1d18:	2000044c 	.word	0x2000044c
 80a1d1c:	20000450 	.word	0x20000450
 80a1d20:	200003c8 	.word	0x200003c8
 80a1d24:	200003b4 	.word	0x200003b4
 80a1d28:	20000370 	.word	0x20000370
 80a1d2c:	080a1c5d 	.word	0x080a1c5d

080a1d30 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1d30:	7441      	strb	r1, [r0, #17]
 80a1d32:	4770      	bx	lr

080a1d34 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a1d34:	4770      	bx	lr

080a1d36 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a1d36:	2100      	movs	r1, #0
 80a1d38:	7c00      	ldrb	r0, [r0, #16]
 80a1d3a:	f7ff bd33 	b.w	80a17a4 <HAL_USB_USART_Receive_Data>

080a1d3e <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a1d3e:	2101      	movs	r1, #1
 80a1d40:	7c00      	ldrb	r0, [r0, #16]
 80a1d42:	f7ff bd2f 	b.w	80a17a4 <HAL_USB_USART_Receive_Data>

080a1d46 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a1d46:	7c00      	ldrb	r0, [r0, #16]
 80a1d48:	f7ff bd24 	b.w	80a1794 <HAL_USB_USART_Available_Data_For_Write>

080a1d4c <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a1d4c:	7c00      	ldrb	r0, [r0, #16]
 80a1d4e:	f7ff bd19 	b.w	80a1784 <HAL_USB_USART_Available_Data>

080a1d52 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a1d52:	b538      	push	{r3, r4, r5, lr}
 80a1d54:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1d56:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a1d58:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1d5a:	f7ff fd1b 	bl	80a1794 <HAL_USB_USART_Available_Data_For_Write>
 80a1d5e:	2800      	cmp	r0, #0
 80a1d60:	dc01      	bgt.n	80a1d66 <_ZN9USBSerial5writeEh+0x14>
 80a1d62:	7c60      	ldrb	r0, [r4, #17]
 80a1d64:	b120      	cbz	r0, 80a1d70 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a1d66:	4629      	mov	r1, r5
 80a1d68:	7c20      	ldrb	r0, [r4, #16]
 80a1d6a:	f7ff fd23 	bl	80a17b4 <HAL_USB_USART_Send_Data>
    return 1;
 80a1d6e:	2001      	movs	r0, #1
  }
  return 0;
}
 80a1d70:	bd38      	pop	{r3, r4, r5, pc}

080a1d72 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1d72:	7c00      	ldrb	r0, [r0, #16]
 80a1d74:	f7ff bd26 	b.w	80a17c4 <HAL_USB_USART_Flush_Data>

080a1d78 <_ZN9USBSerialD0Ev>:
 80a1d78:	b510      	push	{r4, lr}
 80a1d7a:	4604      	mov	r4, r0
 80a1d7c:	f7fe f98d 	bl	80a009a <_ZdlPv>
 80a1d80:	4620      	mov	r0, r4
 80a1d82:	bd10      	pop	{r4, pc}

080a1d84 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1d84:	b510      	push	{r4, lr}
 80a1d86:	4604      	mov	r4, r0
 80a1d88:	2300      	movs	r3, #0
 80a1d8a:	6063      	str	r3, [r4, #4]
 80a1d8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1d90:	60a3      	str	r3, [r4, #8]
 80a1d92:	4b05      	ldr	r3, [pc, #20]	; (80a1da8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1d94:	4608      	mov	r0, r1
 80a1d96:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1d98:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1d9a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1d9c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1d9e:	4611      	mov	r1, r2
 80a1da0:	f7ff fce8 	bl	80a1774 <HAL_USB_USART_Init>
}
 80a1da4:	4620      	mov	r0, r4
 80a1da6:	bd10      	pop	{r4, pc}
 80a1da8:	080a27a8 	.word	0x080a27a8

080a1dac <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1dac:	b510      	push	{r4, lr}
 80a1dae:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1db0:	2214      	movs	r2, #20
 80a1db2:	2100      	movs	r1, #0
 80a1db4:	f000 fb37 	bl	80a2426 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1db8:	4b05      	ldr	r3, [pc, #20]	; (80a1dd0 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1dba:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1dbc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1dbe:	4b05      	ldr	r3, [pc, #20]	; (80a1dd4 <_Z19acquireSerialBufferv+0x28>)
 80a1dc0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1dc2:	f240 1301 	movw	r3, #257	; 0x101
 80a1dc6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1dc8:	2381      	movs	r3, #129	; 0x81
 80a1dca:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1dcc:	bd10      	pop	{r4, pc}
 80a1dce:	bf00      	nop
 80a1dd0:	20000559 	.word	0x20000559
 80a1dd4:	200004d8 	.word	0x200004d8

080a1dd8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1dd8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1dda:	4d0e      	ldr	r5, [pc, #56]	; (80a1e14 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1ddc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1dde:	a801      	add	r0, sp, #4
 80a1de0:	f7ff ffe4 	bl	80a1dac <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1de4:	6829      	ldr	r1, [r5, #0]
 80a1de6:	f011 0401 	ands.w	r4, r1, #1
 80a1dea:	d110      	bne.n	80a1e0e <_Z16_fetch_usbserialv+0x36>
 80a1dec:	4628      	mov	r0, r5
 80a1dee:	f7fe f956 	bl	80a009e <__cxa_guard_acquire>
 80a1df2:	b160      	cbz	r0, 80a1e0e <_Z16_fetch_usbserialv+0x36>
 80a1df4:	aa01      	add	r2, sp, #4
 80a1df6:	4621      	mov	r1, r4
 80a1df8:	4807      	ldr	r0, [pc, #28]	; (80a1e18 <_Z16_fetch_usbserialv+0x40>)
 80a1dfa:	f7ff ffc3 	bl	80a1d84 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1dfe:	4628      	mov	r0, r5
 80a1e00:	f7fe f952 	bl	80a00a8 <__cxa_guard_release>
 80a1e04:	4a05      	ldr	r2, [pc, #20]	; (80a1e1c <_Z16_fetch_usbserialv+0x44>)
 80a1e06:	4906      	ldr	r1, [pc, #24]	; (80a1e20 <_Z16_fetch_usbserialv+0x48>)
 80a1e08:	4803      	ldr	r0, [pc, #12]	; (80a1e18 <_Z16_fetch_usbserialv+0x40>)
 80a1e0a:	f000 f9a1 	bl	80a2150 <__aeabi_atexit>
	return _usbserial;
}
 80a1e0e:	4802      	ldr	r0, [pc, #8]	; (80a1e18 <_Z16_fetch_usbserialv+0x40>)
 80a1e10:	b007      	add	sp, #28
 80a1e12:	bd30      	pop	{r4, r5, pc}
 80a1e14:	200004d4 	.word	0x200004d4
 80a1e18:	2000065c 	.word	0x2000065c
 80a1e1c:	20000370 	.word	0x20000370
 80a1e20:	080a1d35 	.word	0x080a1d35

080a1e24 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1e24:	b510      	push	{r4, lr}
 80a1e26:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1e28:	2214      	movs	r2, #20
 80a1e2a:	2100      	movs	r1, #0
 80a1e2c:	f000 fafb 	bl	80a2426 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1e30:	4b05      	ldr	r3, [pc, #20]	; (80a1e48 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1e32:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1e34:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1e36:	4b05      	ldr	r3, [pc, #20]	; (80a1e4c <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1e38:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1e3a:	f240 1301 	movw	r3, #257	; 0x101
 80a1e3e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1e40:	2381      	movs	r3, #129	; 0x81
 80a1e42:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1e44:	bd10      	pop	{r4, pc}
 80a1e46:	bf00      	nop
 80a1e48:	2000070c 	.word	0x2000070c
 80a1e4c:	20000674 	.word	0x20000674

080a1e50 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1e50:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1e52:	4c0e      	ldr	r4, [pc, #56]	; (80a1e8c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1e54:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1e56:	a801      	add	r0, sp, #4
 80a1e58:	f7ff ffe4 	bl	80a1e24 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1e5c:	6823      	ldr	r3, [r4, #0]
 80a1e5e:	07db      	lsls	r3, r3, #31
 80a1e60:	d410      	bmi.n	80a1e84 <_Z17_fetch_usbserial1v+0x34>
 80a1e62:	4620      	mov	r0, r4
 80a1e64:	f7fe f91b 	bl	80a009e <__cxa_guard_acquire>
 80a1e68:	b160      	cbz	r0, 80a1e84 <_Z17_fetch_usbserial1v+0x34>
 80a1e6a:	aa01      	add	r2, sp, #4
 80a1e6c:	2101      	movs	r1, #1
 80a1e6e:	4808      	ldr	r0, [pc, #32]	; (80a1e90 <_Z17_fetch_usbserial1v+0x40>)
 80a1e70:	f7ff ff88 	bl	80a1d84 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1e74:	4620      	mov	r0, r4
 80a1e76:	f7fe f917 	bl	80a00a8 <__cxa_guard_release>
 80a1e7a:	4a06      	ldr	r2, [pc, #24]	; (80a1e94 <_Z17_fetch_usbserial1v+0x44>)
 80a1e7c:	4906      	ldr	r1, [pc, #24]	; (80a1e98 <_Z17_fetch_usbserial1v+0x48>)
 80a1e7e:	4804      	ldr	r0, [pc, #16]	; (80a1e90 <_Z17_fetch_usbserial1v+0x40>)
 80a1e80:	f000 f966 	bl	80a2150 <__aeabi_atexit>
  return _usbserial1;
}
 80a1e84:	4802      	ldr	r0, [pc, #8]	; (80a1e90 <_Z17_fetch_usbserial1v+0x40>)
 80a1e86:	b006      	add	sp, #24
 80a1e88:	bd10      	pop	{r4, pc}
 80a1e8a:	bf00      	nop
 80a1e8c:	20000670 	.word	0x20000670
 80a1e90:	200006f8 	.word	0x200006f8
 80a1e94:	20000370 	.word	0x20000370
 80a1e98:	080a1d35 	.word	0x080a1d35

080a1e9c <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a1e9c:	4770      	bx	lr

080a1e9e <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1e9e:	2200      	movs	r2, #0
 80a1ea0:	4611      	mov	r1, r2
 80a1ea2:	4610      	mov	r0, r2
 80a1ea4:	f7ff bcd2 	b.w	80a184c <network_ready>

080a1ea8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a1ea8:	4803      	ldr	r0, [pc, #12]	; (80a1eb8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1eaa:	4b04      	ldr	r3, [pc, #16]	; (80a1ebc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a1eac:	4a04      	ldr	r2, [pc, #16]	; (80a1ec0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x18>)
 80a1eae:	4905      	ldr	r1, [pc, #20]	; (80a1ec4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x1c>)
 80a1eb0:	6003      	str	r3, [r0, #0]
 80a1eb2:	f000 b94d 	b.w	80a2150 <__aeabi_atexit>
 80a1eb6:	bf00      	nop
 80a1eb8:	20000810 	.word	0x20000810
 80a1ebc:	080a27d8 	.word	0x080a27d8
 80a1ec0:	20000370 	.word	0x20000370
 80a1ec4:	080a1e9d 	.word	0x080a1e9d

080a1ec8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1ec8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1eca:	4b14      	ldr	r3, [pc, #80]	; (80a1f1c <serialEventRun+0x54>)
 80a1ecc:	b133      	cbz	r3, 80a1edc <serialEventRun+0x14>
 80a1ece:	f7ff ff83 	bl	80a1dd8 <_Z16_fetch_usbserialv>
 80a1ed2:	6803      	ldr	r3, [r0, #0]
 80a1ed4:	691b      	ldr	r3, [r3, #16]
 80a1ed6:	4798      	blx	r3
 80a1ed8:	2800      	cmp	r0, #0
 80a1eda:	dc16      	bgt.n	80a1f0a <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1edc:	4b10      	ldr	r3, [pc, #64]	; (80a1f20 <serialEventRun+0x58>)
 80a1ede:	b133      	cbz	r3, 80a1eee <serialEventRun+0x26>
 80a1ee0:	f7ff ff00 	bl	80a1ce4 <_Z22__fetch_global_Serial1v>
 80a1ee4:	6803      	ldr	r3, [r0, #0]
 80a1ee6:	691b      	ldr	r3, [r3, #16]
 80a1ee8:	4798      	blx	r3
 80a1eea:	2800      	cmp	r0, #0
 80a1eec:	dc10      	bgt.n	80a1f10 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1eee:	4b0d      	ldr	r3, [pc, #52]	; (80a1f24 <serialEventRun+0x5c>)
 80a1ef0:	b10b      	cbz	r3, 80a1ef6 <serialEventRun+0x2e>
 80a1ef2:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1ef6:	4b0c      	ldr	r3, [pc, #48]	; (80a1f28 <serialEventRun+0x60>)
 80a1ef8:	b17b      	cbz	r3, 80a1f1a <serialEventRun+0x52>
 80a1efa:	f7ff ffa9 	bl	80a1e50 <_Z17_fetch_usbserial1v>
 80a1efe:	6803      	ldr	r3, [r0, #0]
 80a1f00:	691b      	ldr	r3, [r3, #16]
 80a1f02:	4798      	blx	r3
 80a1f04:	2800      	cmp	r0, #0
 80a1f06:	dc06      	bgt.n	80a1f16 <serialEventRun+0x4e>
 80a1f08:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1f0a:	f3af 8000 	nop.w
 80a1f0e:	e7e5      	b.n	80a1edc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1f10:	f3af 8000 	nop.w
 80a1f14:	e7eb      	b.n	80a1eee <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1f16:	f3af 8000 	nop.w
 80a1f1a:	bd08      	pop	{r3, pc}
	...

080a1f2c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1f2c:	b508      	push	{r3, lr}
	serialEventRun();
 80a1f2e:	f7ff ffcb 	bl	80a1ec8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1f32:	f7ff fb6d 	bl	80a1610 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1f36:	4b01      	ldr	r3, [pc, #4]	; (80a1f3c <_post_loop+0x10>)
 80a1f38:	6018      	str	r0, [r3, #0]
 80a1f3a:	bd08      	pop	{r3, pc}
 80a1f3c:	2000081c 	.word	0x2000081c

080a1f40 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1f40:	4802      	ldr	r0, [pc, #8]	; (80a1f4c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1f42:	4a03      	ldr	r2, [pc, #12]	; (80a1f50 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1f44:	4903      	ldr	r1, [pc, #12]	; (80a1f54 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1f46:	1a12      	subs	r2, r2, r0
 80a1f48:	f000 ba62 	b.w	80a2410 <memcpy>
 80a1f4c:	40024000 	.word	0x40024000
 80a1f50:	40024004 	.word	0x40024004
 80a1f54:	080a2980 	.word	0x080a2980

080a1f58 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1f58:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1f5a:	2300      	movs	r3, #0
 80a1f5c:	9300      	str	r3, [sp, #0]
 80a1f5e:	461a      	mov	r2, r3
 80a1f60:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1f64:	f7ff fc50 	bl	80a1808 <system_ctrl_set_result>
}
 80a1f68:	b003      	add	sp, #12
 80a1f6a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1f70 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a1f70:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1f72:	8843      	ldrh	r3, [r0, #2]
 80a1f74:	2b0a      	cmp	r3, #10
 80a1f76:	d008      	beq.n	80a1f8a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1f78:	2b50      	cmp	r3, #80	; 0x50
 80a1f7a:	d109      	bne.n	80a1f90 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1f7c:	4b09      	ldr	r3, [pc, #36]	; (80a1fa4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1f7e:	681b      	ldr	r3, [r3, #0]
 80a1f80:	b13b      	cbz	r3, 80a1f92 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a1f82:	b003      	add	sp, #12
 80a1f84:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1f88:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1f8a:	f7ff ffe5 	bl	80a1f58 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a1f8e:	e006      	b.n	80a1f9e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1f90:	2300      	movs	r3, #0
 80a1f92:	9300      	str	r3, [sp, #0]
 80a1f94:	461a      	mov	r2, r3
 80a1f96:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1f9a:	f7ff fc35 	bl	80a1808 <system_ctrl_set_result>
        break;
    }
}
 80a1f9e:	b003      	add	sp, #12
 80a1fa0:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1fa4:	20000814 	.word	0x20000814

080a1fa8 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1fa8:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1faa:	4c10      	ldr	r4, [pc, #64]	; (80a1fec <module_user_init_hook+0x44>)
 80a1fac:	4d10      	ldr	r5, [pc, #64]	; (80a1ff0 <module_user_init_hook+0x48>)
 80a1fae:	6823      	ldr	r3, [r4, #0]
 80a1fb0:	42ab      	cmp	r3, r5
 80a1fb2:	4b10      	ldr	r3, [pc, #64]	; (80a1ff4 <module_user_init_hook+0x4c>)
 80a1fb4:	bf0c      	ite	eq
 80a1fb6:	2201      	moveq	r2, #1
 80a1fb8:	2200      	movne	r2, #0
 80a1fba:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1fbc:	d002      	beq.n	80a1fc4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1fbe:	f7ff ffbf 	bl	80a1f40 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1fc2:	6025      	str	r5, [r4, #0]
#endif

    // todo - add a RNG define for that capability
#if defined(STM32F2XX)
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    srand(HAL_RNG_GetRandomNumber());
 80a1fc4:	f7ff fb14 	bl	80a15f0 <HAL_RNG_GetRandomNumber>
 80a1fc8:	f000 fa36 	bl	80a2438 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1fcc:	4b0a      	ldr	r3, [pc, #40]	; (80a1ff8 <module_user_init_hook+0x50>)
 80a1fce:	b11b      	cbz	r3, 80a1fd8 <module_user_init_hook+0x30>
        uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1fd0:	f7ff fb0e 	bl	80a15f0 <HAL_RNG_GetRandomNumber>
        random_seed_from_cloud(seed);
 80a1fd4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1fd8:	2100      	movs	r1, #0
 80a1fda:	4807      	ldr	r0, [pc, #28]	; (80a1ff8 <module_user_init_hook+0x50>)
 80a1fdc:	f7ff fc2e 	bl	80a183c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1fe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1fe4:	2100      	movs	r1, #0
 80a1fe6:	4805      	ldr	r0, [pc, #20]	; (80a1ffc <module_user_init_hook+0x54>)
 80a1fe8:	f7ff bc04 	b.w	80a17f4 <system_ctrl_set_app_request_handler>
 80a1fec:	40024000 	.word	0x40024000
 80a1ff0:	9a271c1e 	.word	0x9a271c1e
 80a1ff4:	20000818 	.word	0x20000818
 80a1ff8:	00000000 	.word	0x00000000
 80a1ffc:	080a1f71 	.word	0x080a1f71

080a2000 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a2000:	b510      	push	{r4, lr}
 80a2002:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2004:	480f      	ldr	r0, [pc, #60]	; (80a2044 <pinAvailable+0x44>)
 80a2006:	f7ff fd83 	bl	80a1b10 <_ZN8SPIClass9isEnabledEv>
 80a200a:	b128      	cbz	r0, 80a2018 <pinAvailable+0x18>
 80a200c:	f1a4 030d 	sub.w	r3, r4, #13
 80a2010:	2b02      	cmp	r3, #2
 80a2012:	d801      	bhi.n	80a2018 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a2014:	2000      	movs	r0, #0
 80a2016:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a2018:	f000 f840 	bl	80a209c <_Z19__fetch_global_Wirev>
 80a201c:	f7ff fcac 	bl	80a1978 <_ZN7TwoWire9isEnabledEv>
 80a2020:	b108      	cbz	r0, 80a2026 <pinAvailable+0x26>
 80a2022:	2c01      	cmp	r4, #1
 80a2024:	d9f6      	bls.n	80a2014 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a2026:	f7ff fe5d 	bl	80a1ce4 <_Z22__fetch_global_Serial1v>
 80a202a:	f7ff fe57 	bl	80a1cdc <_ZN11USARTSerial9isEnabledEv>
 80a202e:	b118      	cbz	r0, 80a2038 <pinAvailable+0x38>
 80a2030:	f1a4 0312 	sub.w	r3, r4, #18
 80a2034:	2b01      	cmp	r3, #1
 80a2036:	d9ed      	bls.n	80a2014 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a2038:	2c17      	cmp	r4, #23
 80a203a:	bf8c      	ite	hi
 80a203c:	2000      	movhi	r0, #0
 80a203e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a2040:	bd10      	pop	{r4, pc}
 80a2042:	bf00      	nop
 80a2044:	20000850 	.word	0x20000850

080a2048 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2048:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a204a:	b538      	push	{r3, r4, r5, lr}
 80a204c:	4604      	mov	r4, r0
 80a204e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2050:	d80a      	bhi.n	80a2068 <pinMode+0x20>
 80a2052:	29ff      	cmp	r1, #255	; 0xff
 80a2054:	d008      	beq.n	80a2068 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2056:	f7ff ffd3 	bl	80a2000 <pinAvailable>
 80a205a:	b128      	cbz	r0, 80a2068 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a205c:	4629      	mov	r1, r5
 80a205e:	4620      	mov	r0, r4
}
 80a2060:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2064:	f7ff bae4 	b.w	80a1630 <HAL_Pin_Mode>
 80a2068:	bd38      	pop	{r3, r4, r5, pc}

080a206a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a206a:	b538      	push	{r3, r4, r5, lr}
 80a206c:	4604      	mov	r4, r0
 80a206e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2070:	f7ff fae6 	bl	80a1640 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2074:	28ff      	cmp	r0, #255	; 0xff
 80a2076:	d010      	beq.n	80a209a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2078:	2806      	cmp	r0, #6
 80a207a:	d804      	bhi.n	80a2086 <digitalWrite+0x1c>
 80a207c:	234d      	movs	r3, #77	; 0x4d
 80a207e:	fa23 f000 	lsr.w	r0, r3, r0
 80a2082:	07c3      	lsls	r3, r0, #31
 80a2084:	d409      	bmi.n	80a209a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2086:	4620      	mov	r0, r4
 80a2088:	f7ff ffba 	bl	80a2000 <pinAvailable>
 80a208c:	b128      	cbz	r0, 80a209a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a208e:	4629      	mov	r1, r5
 80a2090:	4620      	mov	r0, r4
}
 80a2092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2096:	f7ff badb 	b.w	80a1650 <HAL_GPIO_Write>
 80a209a:	bd38      	pop	{r3, r4, r5, pc}

080a209c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a209c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a209e:	4d0b      	ldr	r5, [pc, #44]	; (80a20cc <_Z19__fetch_global_Wirev+0x30>)
 80a20a0:	6829      	ldr	r1, [r5, #0]
 80a20a2:	f011 0401 	ands.w	r4, r1, #1
 80a20a6:	d10f      	bne.n	80a20c8 <_Z19__fetch_global_Wirev+0x2c>
 80a20a8:	4628      	mov	r0, r5
 80a20aa:	f7fd fff8 	bl	80a009e <__cxa_guard_acquire>
 80a20ae:	b158      	cbz	r0, 80a20c8 <_Z19__fetch_global_Wirev+0x2c>
 80a20b0:	4621      	mov	r1, r4
 80a20b2:	4807      	ldr	r0, [pc, #28]	; (80a20d0 <_Z19__fetch_global_Wirev+0x34>)
 80a20b4:	f7ff fc4e 	bl	80a1954 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a20b8:	4628      	mov	r0, r5
 80a20ba:	f7fd fff5 	bl	80a00a8 <__cxa_guard_release>
 80a20be:	4a05      	ldr	r2, [pc, #20]	; (80a20d4 <_Z19__fetch_global_Wirev+0x38>)
 80a20c0:	4905      	ldr	r1, [pc, #20]	; (80a20d8 <_Z19__fetch_global_Wirev+0x3c>)
 80a20c2:	4803      	ldr	r0, [pc, #12]	; (80a20d0 <_Z19__fetch_global_Wirev+0x34>)
 80a20c4:	f000 f844 	bl	80a2150 <__aeabi_atexit>
	return wire;
}
 80a20c8:	4801      	ldr	r0, [pc, #4]	; (80a20d0 <_Z19__fetch_global_Wirev+0x34>)
 80a20ca:	bd38      	pop	{r3, r4, r5, pc}
 80a20cc:	20000820 	.word	0x20000820
 80a20d0:	20000824 	.word	0x20000824
 80a20d4:	20000370 	.word	0x20000370
 80a20d8:	080a18ff 	.word	0x080a18ff

080a20dc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a20dc:	b513      	push	{r0, r1, r4, lr}
 80a20de:	4c08      	ldr	r4, [pc, #32]	; (80a2100 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a20e0:	2300      	movs	r3, #0
 80a20e2:	461a      	mov	r2, r3
 80a20e4:	4619      	mov	r1, r3
 80a20e6:	9300      	str	r3, [sp, #0]
 80a20e8:	4620      	mov	r0, r4
 80a20ea:	f7ff fc77 	bl	80a19dc <_ZN9IPAddressC1Ehhhh>
 80a20ee:	4620      	mov	r0, r4
 80a20f0:	4a04      	ldr	r2, [pc, #16]	; (80a2104 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a20f2:	4905      	ldr	r1, [pc, #20]	; (80a2108 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a20f4:	b002      	add	sp, #8
 80a20f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a20fa:	f000 b829 	b.w	80a2150 <__aeabi_atexit>
 80a20fe:	bf00      	nop
 80a2100:	20000838 	.word	0x20000838
 80a2104:	20000370 	.word	0x20000370
 80a2108:	080a1981 	.word	0x080a1981

080a210c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a210c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a210e:	4c0c      	ldr	r4, [pc, #48]	; (80a2140 <_GLOBAL__sub_I_SPI+0x34>)
 80a2110:	4e0c      	ldr	r6, [pc, #48]	; (80a2144 <_GLOBAL__sub_I_SPI+0x38>)
 80a2112:	4d0d      	ldr	r5, [pc, #52]	; (80a2148 <_GLOBAL__sub_I_SPI+0x3c>)
 80a2114:	2100      	movs	r1, #0
 80a2116:	4620      	mov	r0, r4
 80a2118:	f7ff fce6 	bl	80a1ae8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a211c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a211e:	4c0b      	ldr	r4, [pc, #44]	; (80a214c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2120:	4632      	mov	r2, r6
 80a2122:	4629      	mov	r1, r5
 80a2124:	f000 f814 	bl	80a2150 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2128:	2101      	movs	r1, #1
 80a212a:	4620      	mov	r0, r4
 80a212c:	f7ff fcdc 	bl	80a1ae8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2130:	4632      	mov	r2, r6
 80a2132:	4629      	mov	r1, r5
 80a2134:	4620      	mov	r0, r4
 80a2136:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a213a:	f000 b809 	b.w	80a2150 <__aeabi_atexit>
 80a213e:	bf00      	nop
 80a2140:	20000850 	.word	0x20000850
 80a2144:	20000370 	.word	0x20000370
 80a2148:	080a1ad9 	.word	0x080a1ad9
 80a214c:	20000860 	.word	0x20000860

080a2150 <__aeabi_atexit>:
 80a2150:	460b      	mov	r3, r1
 80a2152:	4601      	mov	r1, r0
 80a2154:	4618      	mov	r0, r3
 80a2156:	f000 b94d 	b.w	80a23f4 <__cxa_atexit>
	...

080a215c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a215c:	4b24      	ldr	r3, [pc, #144]	; (80a21f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a215e:	681a      	ldr	r2, [r3, #0]
 80a2160:	07d0      	lsls	r0, r2, #31
 80a2162:	bf5c      	itt	pl
 80a2164:	2201      	movpl	r2, #1
 80a2166:	601a      	strpl	r2, [r3, #0]
 80a2168:	4b22      	ldr	r3, [pc, #136]	; (80a21f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a216a:	681a      	ldr	r2, [r3, #0]
 80a216c:	07d1      	lsls	r1, r2, #31
 80a216e:	bf5c      	itt	pl
 80a2170:	2201      	movpl	r2, #1
 80a2172:	601a      	strpl	r2, [r3, #0]
 80a2174:	4b20      	ldr	r3, [pc, #128]	; (80a21f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2176:	681a      	ldr	r2, [r3, #0]
 80a2178:	07d2      	lsls	r2, r2, #31
 80a217a:	bf5c      	itt	pl
 80a217c:	2201      	movpl	r2, #1
 80a217e:	601a      	strpl	r2, [r3, #0]
 80a2180:	4b1e      	ldr	r3, [pc, #120]	; (80a21fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2182:	681a      	ldr	r2, [r3, #0]
 80a2184:	07d0      	lsls	r0, r2, #31
 80a2186:	bf5c      	itt	pl
 80a2188:	2201      	movpl	r2, #1
 80a218a:	601a      	strpl	r2, [r3, #0]
 80a218c:	4b1c      	ldr	r3, [pc, #112]	; (80a2200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a218e:	681a      	ldr	r2, [r3, #0]
 80a2190:	07d1      	lsls	r1, r2, #31
 80a2192:	bf5c      	itt	pl
 80a2194:	2201      	movpl	r2, #1
 80a2196:	601a      	strpl	r2, [r3, #0]
 80a2198:	4b1a      	ldr	r3, [pc, #104]	; (80a2204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a219a:	681a      	ldr	r2, [r3, #0]
 80a219c:	07d2      	lsls	r2, r2, #31
 80a219e:	bf5c      	itt	pl
 80a21a0:	2201      	movpl	r2, #1
 80a21a2:	601a      	strpl	r2, [r3, #0]
 80a21a4:	4b18      	ldr	r3, [pc, #96]	; (80a2208 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a21a6:	681a      	ldr	r2, [r3, #0]
 80a21a8:	07d0      	lsls	r0, r2, #31
 80a21aa:	bf5c      	itt	pl
 80a21ac:	2201      	movpl	r2, #1
 80a21ae:	601a      	strpl	r2, [r3, #0]
 80a21b0:	4b16      	ldr	r3, [pc, #88]	; (80a220c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a21b2:	681a      	ldr	r2, [r3, #0]
 80a21b4:	07d1      	lsls	r1, r2, #31
 80a21b6:	bf5c      	itt	pl
 80a21b8:	2201      	movpl	r2, #1
 80a21ba:	601a      	strpl	r2, [r3, #0]
 80a21bc:	4b14      	ldr	r3, [pc, #80]	; (80a2210 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a21be:	681a      	ldr	r2, [r3, #0]
 80a21c0:	07d2      	lsls	r2, r2, #31
 80a21c2:	bf5c      	itt	pl
 80a21c4:	2201      	movpl	r2, #1
 80a21c6:	601a      	strpl	r2, [r3, #0]
 80a21c8:	4b12      	ldr	r3, [pc, #72]	; (80a2214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a21ca:	681a      	ldr	r2, [r3, #0]
 80a21cc:	07d0      	lsls	r0, r2, #31
 80a21ce:	bf5c      	itt	pl
 80a21d0:	2201      	movpl	r2, #1
 80a21d2:	601a      	strpl	r2, [r3, #0]
 80a21d4:	4b10      	ldr	r3, [pc, #64]	; (80a2218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a21d6:	681a      	ldr	r2, [r3, #0]
 80a21d8:	07d1      	lsls	r1, r2, #31
 80a21da:	bf5c      	itt	pl
 80a21dc:	2201      	movpl	r2, #1
 80a21de:	601a      	strpl	r2, [r3, #0]
 80a21e0:	4b0e      	ldr	r3, [pc, #56]	; (80a221c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a21e2:	681a      	ldr	r2, [r3, #0]
 80a21e4:	07d2      	lsls	r2, r2, #31
 80a21e6:	bf5c      	itt	pl
 80a21e8:	2201      	movpl	r2, #1
 80a21ea:	601a      	strpl	r2, [r3, #0]
 80a21ec:	4770      	bx	lr
 80a21ee:	bf00      	nop
 80a21f0:	2000089c 	.word	0x2000089c
 80a21f4:	20000898 	.word	0x20000898
 80a21f8:	20000894 	.word	0x20000894
 80a21fc:	20000890 	.word	0x20000890
 80a2200:	2000088c 	.word	0x2000088c
 80a2204:	20000888 	.word	0x20000888
 80a2208:	20000884 	.word	0x20000884
 80a220c:	20000880 	.word	0x20000880
 80a2210:	2000087c 	.word	0x2000087c
 80a2214:	20000878 	.word	0x20000878
 80a2218:	20000874 	.word	0x20000874
 80a221c:	20000870 	.word	0x20000870

080a2220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2220:	4b18      	ldr	r3, [pc, #96]	; (80a2284 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2222:	681a      	ldr	r2, [r3, #0]
 80a2224:	07d1      	lsls	r1, r2, #31
 80a2226:	bf5c      	itt	pl
 80a2228:	2201      	movpl	r2, #1
 80a222a:	601a      	strpl	r2, [r3, #0]
 80a222c:	4b16      	ldr	r3, [pc, #88]	; (80a2288 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a222e:	681a      	ldr	r2, [r3, #0]
 80a2230:	07d2      	lsls	r2, r2, #31
 80a2232:	bf5c      	itt	pl
 80a2234:	2201      	movpl	r2, #1
 80a2236:	601a      	strpl	r2, [r3, #0]
 80a2238:	4b14      	ldr	r3, [pc, #80]	; (80a228c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a223a:	681a      	ldr	r2, [r3, #0]
 80a223c:	07d0      	lsls	r0, r2, #31
 80a223e:	bf5c      	itt	pl
 80a2240:	2201      	movpl	r2, #1
 80a2242:	601a      	strpl	r2, [r3, #0]
 80a2244:	4b12      	ldr	r3, [pc, #72]	; (80a2290 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2246:	681a      	ldr	r2, [r3, #0]
 80a2248:	07d1      	lsls	r1, r2, #31
 80a224a:	bf5c      	itt	pl
 80a224c:	2201      	movpl	r2, #1
 80a224e:	601a      	strpl	r2, [r3, #0]
 80a2250:	4b10      	ldr	r3, [pc, #64]	; (80a2294 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2252:	681a      	ldr	r2, [r3, #0]
 80a2254:	07d2      	lsls	r2, r2, #31
 80a2256:	bf5c      	itt	pl
 80a2258:	2201      	movpl	r2, #1
 80a225a:	601a      	strpl	r2, [r3, #0]
 80a225c:	4b0e      	ldr	r3, [pc, #56]	; (80a2298 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a225e:	681a      	ldr	r2, [r3, #0]
 80a2260:	07d0      	lsls	r0, r2, #31
 80a2262:	bf5c      	itt	pl
 80a2264:	2201      	movpl	r2, #1
 80a2266:	601a      	strpl	r2, [r3, #0]
 80a2268:	4b0c      	ldr	r3, [pc, #48]	; (80a229c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a226a:	681a      	ldr	r2, [r3, #0]
 80a226c:	07d1      	lsls	r1, r2, #31
 80a226e:	bf5c      	itt	pl
 80a2270:	2201      	movpl	r2, #1
 80a2272:	601a      	strpl	r2, [r3, #0]
 80a2274:	4b0a      	ldr	r3, [pc, #40]	; (80a22a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2276:	681a      	ldr	r2, [r3, #0]
 80a2278:	07d2      	lsls	r2, r2, #31
 80a227a:	bf5c      	itt	pl
 80a227c:	2201      	movpl	r2, #1
 80a227e:	601a      	strpl	r2, [r3, #0]
 80a2280:	4770      	bx	lr
 80a2282:	bf00      	nop
 80a2284:	200008bc 	.word	0x200008bc
 80a2288:	200008b8 	.word	0x200008b8
 80a228c:	200008b4 	.word	0x200008b4
 80a2290:	200008b0 	.word	0x200008b0
 80a2294:	200008ac 	.word	0x200008ac
 80a2298:	200008a8 	.word	0x200008a8
 80a229c:	200008a4 	.word	0x200008a4
 80a22a0:	200008a0 	.word	0x200008a0

080a22a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a22a4:	4b18      	ldr	r3, [pc, #96]	; (80a2308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a22a6:	681a      	ldr	r2, [r3, #0]
 80a22a8:	07d1      	lsls	r1, r2, #31
 80a22aa:	bf5c      	itt	pl
 80a22ac:	2201      	movpl	r2, #1
 80a22ae:	601a      	strpl	r2, [r3, #0]
 80a22b0:	4b16      	ldr	r3, [pc, #88]	; (80a230c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a22b2:	681a      	ldr	r2, [r3, #0]
 80a22b4:	07d2      	lsls	r2, r2, #31
 80a22b6:	bf5c      	itt	pl
 80a22b8:	2201      	movpl	r2, #1
 80a22ba:	601a      	strpl	r2, [r3, #0]
 80a22bc:	4b14      	ldr	r3, [pc, #80]	; (80a2310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a22be:	681a      	ldr	r2, [r3, #0]
 80a22c0:	07d0      	lsls	r0, r2, #31
 80a22c2:	bf5c      	itt	pl
 80a22c4:	2201      	movpl	r2, #1
 80a22c6:	601a      	strpl	r2, [r3, #0]
 80a22c8:	4b12      	ldr	r3, [pc, #72]	; (80a2314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a22ca:	681a      	ldr	r2, [r3, #0]
 80a22cc:	07d1      	lsls	r1, r2, #31
 80a22ce:	bf5c      	itt	pl
 80a22d0:	2201      	movpl	r2, #1
 80a22d2:	601a      	strpl	r2, [r3, #0]
 80a22d4:	4b10      	ldr	r3, [pc, #64]	; (80a2318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a22d6:	681a      	ldr	r2, [r3, #0]
 80a22d8:	07d2      	lsls	r2, r2, #31
 80a22da:	bf5c      	itt	pl
 80a22dc:	2201      	movpl	r2, #1
 80a22de:	601a      	strpl	r2, [r3, #0]
 80a22e0:	4b0e      	ldr	r3, [pc, #56]	; (80a231c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a22e2:	681a      	ldr	r2, [r3, #0]
 80a22e4:	07d0      	lsls	r0, r2, #31
 80a22e6:	bf5c      	itt	pl
 80a22e8:	2201      	movpl	r2, #1
 80a22ea:	601a      	strpl	r2, [r3, #0]
 80a22ec:	4b0c      	ldr	r3, [pc, #48]	; (80a2320 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a22ee:	681a      	ldr	r2, [r3, #0]
 80a22f0:	07d1      	lsls	r1, r2, #31
 80a22f2:	bf5c      	itt	pl
 80a22f4:	2201      	movpl	r2, #1
 80a22f6:	601a      	strpl	r2, [r3, #0]
 80a22f8:	4b0a      	ldr	r3, [pc, #40]	; (80a2324 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a22fa:	681a      	ldr	r2, [r3, #0]
 80a22fc:	07d2      	lsls	r2, r2, #31
 80a22fe:	bf5c      	itt	pl
 80a2300:	2201      	movpl	r2, #1
 80a2302:	601a      	strpl	r2, [r3, #0]
 80a2304:	4770      	bx	lr
 80a2306:	bf00      	nop
 80a2308:	200008dc 	.word	0x200008dc
 80a230c:	200008d8 	.word	0x200008d8
 80a2310:	200008d4 	.word	0x200008d4
 80a2314:	200008d0 	.word	0x200008d0
 80a2318:	200008cc 	.word	0x200008cc
 80a231c:	200008c8 	.word	0x200008c8
 80a2320:	200008c4 	.word	0x200008c4
 80a2324:	200008c0 	.word	0x200008c0

080a2328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2328:	4b24      	ldr	r3, [pc, #144]	; (80a23bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a232a:	681a      	ldr	r2, [r3, #0]
 80a232c:	07d0      	lsls	r0, r2, #31
 80a232e:	bf5c      	itt	pl
 80a2330:	2201      	movpl	r2, #1
 80a2332:	601a      	strpl	r2, [r3, #0]
 80a2334:	4b22      	ldr	r3, [pc, #136]	; (80a23c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2336:	681a      	ldr	r2, [r3, #0]
 80a2338:	07d1      	lsls	r1, r2, #31
 80a233a:	bf5c      	itt	pl
 80a233c:	2201      	movpl	r2, #1
 80a233e:	601a      	strpl	r2, [r3, #0]
 80a2340:	4b20      	ldr	r3, [pc, #128]	; (80a23c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2342:	681a      	ldr	r2, [r3, #0]
 80a2344:	07d2      	lsls	r2, r2, #31
 80a2346:	bf5c      	itt	pl
 80a2348:	2201      	movpl	r2, #1
 80a234a:	601a      	strpl	r2, [r3, #0]
 80a234c:	4b1e      	ldr	r3, [pc, #120]	; (80a23c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a234e:	681a      	ldr	r2, [r3, #0]
 80a2350:	07d0      	lsls	r0, r2, #31
 80a2352:	bf5c      	itt	pl
 80a2354:	2201      	movpl	r2, #1
 80a2356:	601a      	strpl	r2, [r3, #0]
 80a2358:	4b1c      	ldr	r3, [pc, #112]	; (80a23cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a235a:	681a      	ldr	r2, [r3, #0]
 80a235c:	07d1      	lsls	r1, r2, #31
 80a235e:	bf5c      	itt	pl
 80a2360:	2201      	movpl	r2, #1
 80a2362:	601a      	strpl	r2, [r3, #0]
 80a2364:	4b1a      	ldr	r3, [pc, #104]	; (80a23d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2366:	681a      	ldr	r2, [r3, #0]
 80a2368:	07d2      	lsls	r2, r2, #31
 80a236a:	bf5c      	itt	pl
 80a236c:	2201      	movpl	r2, #1
 80a236e:	601a      	strpl	r2, [r3, #0]
 80a2370:	4b18      	ldr	r3, [pc, #96]	; (80a23d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2372:	681a      	ldr	r2, [r3, #0]
 80a2374:	07d0      	lsls	r0, r2, #31
 80a2376:	bf5c      	itt	pl
 80a2378:	2201      	movpl	r2, #1
 80a237a:	601a      	strpl	r2, [r3, #0]
 80a237c:	4b16      	ldr	r3, [pc, #88]	; (80a23d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a237e:	681a      	ldr	r2, [r3, #0]
 80a2380:	07d1      	lsls	r1, r2, #31
 80a2382:	bf5c      	itt	pl
 80a2384:	2201      	movpl	r2, #1
 80a2386:	601a      	strpl	r2, [r3, #0]
 80a2388:	4b14      	ldr	r3, [pc, #80]	; (80a23dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a238a:	681a      	ldr	r2, [r3, #0]
 80a238c:	07d2      	lsls	r2, r2, #31
 80a238e:	bf5c      	itt	pl
 80a2390:	2201      	movpl	r2, #1
 80a2392:	601a      	strpl	r2, [r3, #0]
 80a2394:	4b12      	ldr	r3, [pc, #72]	; (80a23e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2396:	681a      	ldr	r2, [r3, #0]
 80a2398:	07d0      	lsls	r0, r2, #31
 80a239a:	bf5c      	itt	pl
 80a239c:	2201      	movpl	r2, #1
 80a239e:	601a      	strpl	r2, [r3, #0]
 80a23a0:	4b10      	ldr	r3, [pc, #64]	; (80a23e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a23a2:	681a      	ldr	r2, [r3, #0]
 80a23a4:	07d1      	lsls	r1, r2, #31
 80a23a6:	bf5c      	itt	pl
 80a23a8:	2201      	movpl	r2, #1
 80a23aa:	601a      	strpl	r2, [r3, #0]
 80a23ac:	4b0e      	ldr	r3, [pc, #56]	; (80a23e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a23ae:	681a      	ldr	r2, [r3, #0]
 80a23b0:	07d2      	lsls	r2, r2, #31
 80a23b2:	bf5c      	itt	pl
 80a23b4:	2201      	movpl	r2, #1
 80a23b6:	601a      	strpl	r2, [r3, #0]
 80a23b8:	4770      	bx	lr
 80a23ba:	bf00      	nop
 80a23bc:	2000090c 	.word	0x2000090c
 80a23c0:	20000908 	.word	0x20000908
 80a23c4:	20000904 	.word	0x20000904
 80a23c8:	20000900 	.word	0x20000900
 80a23cc:	200008fc 	.word	0x200008fc
 80a23d0:	200008f8 	.word	0x200008f8
 80a23d4:	200008f4 	.word	0x200008f4
 80a23d8:	200008f0 	.word	0x200008f0
 80a23dc:	200008ec 	.word	0x200008ec
 80a23e0:	200008e8 	.word	0x200008e8
 80a23e4:	200008e4 	.word	0x200008e4
 80a23e8:	200008e0 	.word	0x200008e0

080a23ec <atol>:
 80a23ec:	220a      	movs	r2, #10
 80a23ee:	2100      	movs	r1, #0
 80a23f0:	f000 b8d8 	b.w	80a25a4 <strtol>

080a23f4 <__cxa_atexit>:
 80a23f4:	b510      	push	{r4, lr}
 80a23f6:	4c05      	ldr	r4, [pc, #20]	; (80a240c <__cxa_atexit+0x18>)
 80a23f8:	4613      	mov	r3, r2
 80a23fa:	b12c      	cbz	r4, 80a2408 <__cxa_atexit+0x14>
 80a23fc:	460a      	mov	r2, r1
 80a23fe:	4601      	mov	r1, r0
 80a2400:	2002      	movs	r0, #2
 80a2402:	f3af 8000 	nop.w
 80a2406:	bd10      	pop	{r4, pc}
 80a2408:	4620      	mov	r0, r4
 80a240a:	bd10      	pop	{r4, pc}
 80a240c:	00000000 	.word	0x00000000

080a2410 <memcpy>:
 80a2410:	b510      	push	{r4, lr}
 80a2412:	1e43      	subs	r3, r0, #1
 80a2414:	440a      	add	r2, r1
 80a2416:	4291      	cmp	r1, r2
 80a2418:	d004      	beq.n	80a2424 <memcpy+0x14>
 80a241a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a241e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2422:	e7f8      	b.n	80a2416 <memcpy+0x6>
 80a2424:	bd10      	pop	{r4, pc}

080a2426 <memset>:
 80a2426:	4603      	mov	r3, r0
 80a2428:	4402      	add	r2, r0
 80a242a:	4293      	cmp	r3, r2
 80a242c:	d002      	beq.n	80a2434 <memset+0xe>
 80a242e:	f803 1b01 	strb.w	r1, [r3], #1
 80a2432:	e7fa      	b.n	80a242a <memset+0x4>
 80a2434:	4770      	bx	lr
	...

080a2438 <srand>:
 80a2438:	b538      	push	{r3, r4, r5, lr}
 80a243a:	4b12      	ldr	r3, [pc, #72]	; (80a2484 <srand+0x4c>)
 80a243c:	4605      	mov	r5, r0
 80a243e:	681c      	ldr	r4, [r3, #0]
 80a2440:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2442:	b9d3      	cbnz	r3, 80a247a <srand+0x42>
 80a2444:	2018      	movs	r0, #24
 80a2446:	f7ff fa09 	bl	80a185c <malloc>
 80a244a:	f243 330e 	movw	r3, #13070	; 0x330e
 80a244e:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2450:	8003      	strh	r3, [r0, #0]
 80a2452:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2456:	8043      	strh	r3, [r0, #2]
 80a2458:	f241 2334 	movw	r3, #4660	; 0x1234
 80a245c:	8083      	strh	r3, [r0, #4]
 80a245e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2462:	80c3      	strh	r3, [r0, #6]
 80a2464:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2468:	8103      	strh	r3, [r0, #8]
 80a246a:	2305      	movs	r3, #5
 80a246c:	8143      	strh	r3, [r0, #10]
 80a246e:	230b      	movs	r3, #11
 80a2470:	8183      	strh	r3, [r0, #12]
 80a2472:	2201      	movs	r2, #1
 80a2474:	2300      	movs	r3, #0
 80a2476:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a247a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a247c:	2200      	movs	r2, #0
 80a247e:	611d      	str	r5, [r3, #16]
 80a2480:	615a      	str	r2, [r3, #20]
 80a2482:	bd38      	pop	{r3, r4, r5, pc}
 80a2484:	2000036c 	.word	0x2000036c

080a2488 <strlen>:
 80a2488:	4603      	mov	r3, r0
 80a248a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a248e:	2a00      	cmp	r2, #0
 80a2490:	d1fb      	bne.n	80a248a <strlen+0x2>
 80a2492:	1a18      	subs	r0, r3, r0
 80a2494:	3801      	subs	r0, #1
 80a2496:	4770      	bx	lr

080a2498 <_strtol_r>:
 80a2498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a249c:	460f      	mov	r7, r1
 80a249e:	4680      	mov	r8, r0
 80a24a0:	483f      	ldr	r0, [pc, #252]	; (80a25a0 <_strtol_r+0x108>)
 80a24a2:	f8d0 9000 	ldr.w	r9, [r0]
 80a24a6:	463d      	mov	r5, r7
 80a24a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a24ac:	eb09 0004 	add.w	r0, r9, r4
 80a24b0:	7840      	ldrb	r0, [r0, #1]
 80a24b2:	f000 0008 	and.w	r0, r0, #8
 80a24b6:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a24ba:	b108      	cbz	r0, 80a24c0 <_strtol_r+0x28>
 80a24bc:	462f      	mov	r7, r5
 80a24be:	e7f2      	b.n	80a24a6 <_strtol_r+0xe>
 80a24c0:	2c2d      	cmp	r4, #45	; 0x2d
 80a24c2:	d103      	bne.n	80a24cc <_strtol_r+0x34>
 80a24c4:	1cbd      	adds	r5, r7, #2
 80a24c6:	787c      	ldrb	r4, [r7, #1]
 80a24c8:	2601      	movs	r6, #1
 80a24ca:	e003      	b.n	80a24d4 <_strtol_r+0x3c>
 80a24cc:	2c2b      	cmp	r4, #43	; 0x2b
 80a24ce:	bf04      	itt	eq
 80a24d0:	787c      	ldrbeq	r4, [r7, #1]
 80a24d2:	1cbd      	addeq	r5, r7, #2
 80a24d4:	b113      	cbz	r3, 80a24dc <_strtol_r+0x44>
 80a24d6:	2b10      	cmp	r3, #16
 80a24d8:	d10a      	bne.n	80a24f0 <_strtol_r+0x58>
 80a24da:	e05b      	b.n	80a2594 <_strtol_r+0xfc>
 80a24dc:	2c30      	cmp	r4, #48	; 0x30
 80a24de:	d157      	bne.n	80a2590 <_strtol_r+0xf8>
 80a24e0:	7828      	ldrb	r0, [r5, #0]
 80a24e2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a24e6:	2858      	cmp	r0, #88	; 0x58
 80a24e8:	d14d      	bne.n	80a2586 <_strtol_r+0xee>
 80a24ea:	786c      	ldrb	r4, [r5, #1]
 80a24ec:	2310      	movs	r3, #16
 80a24ee:	3502      	adds	r5, #2
 80a24f0:	2e00      	cmp	r6, #0
 80a24f2:	bf14      	ite	ne
 80a24f4:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a24f8:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a24fc:	fbbc faf3 	udiv	sl, ip, r3
 80a2500:	2700      	movs	r7, #0
 80a2502:	4638      	mov	r0, r7
 80a2504:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a2508:	eb09 0e04 	add.w	lr, r9, r4
 80a250c:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a2510:	f01e 0f04 	tst.w	lr, #4
 80a2514:	d001      	beq.n	80a251a <_strtol_r+0x82>
 80a2516:	3c30      	subs	r4, #48	; 0x30
 80a2518:	e00b      	b.n	80a2532 <_strtol_r+0x9a>
 80a251a:	f01e 0e03 	ands.w	lr, lr, #3
 80a251e:	d01b      	beq.n	80a2558 <_strtol_r+0xc0>
 80a2520:	f1be 0f01 	cmp.w	lr, #1
 80a2524:	bf0c      	ite	eq
 80a2526:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a252a:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a252e:	ebce 0404 	rsb	r4, lr, r4
 80a2532:	42a3      	cmp	r3, r4
 80a2534:	dd10      	ble.n	80a2558 <_strtol_r+0xc0>
 80a2536:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80a253a:	d00a      	beq.n	80a2552 <_strtol_r+0xba>
 80a253c:	4550      	cmp	r0, sl
 80a253e:	d806      	bhi.n	80a254e <_strtol_r+0xb6>
 80a2540:	d101      	bne.n	80a2546 <_strtol_r+0xae>
 80a2542:	4564      	cmp	r4, ip
 80a2544:	dc03      	bgt.n	80a254e <_strtol_r+0xb6>
 80a2546:	fb03 4000 	mla	r0, r3, r0, r4
 80a254a:	2701      	movs	r7, #1
 80a254c:	e001      	b.n	80a2552 <_strtol_r+0xba>
 80a254e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a2552:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a2556:	e7d7      	b.n	80a2508 <_strtol_r+0x70>
 80a2558:	1c7b      	adds	r3, r7, #1
 80a255a:	d10c      	bne.n	80a2576 <_strtol_r+0xde>
 80a255c:	2e00      	cmp	r6, #0
 80a255e:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a2562:	bf14      	ite	ne
 80a2564:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a2568:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a256c:	f8c8 3000 	str.w	r3, [r8]
 80a2570:	b92a      	cbnz	r2, 80a257e <_strtol_r+0xe6>
 80a2572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a2576:	b106      	cbz	r6, 80a257a <_strtol_r+0xe2>
 80a2578:	4240      	negs	r0, r0
 80a257a:	b172      	cbz	r2, 80a259a <_strtol_r+0x102>
 80a257c:	b107      	cbz	r7, 80a2580 <_strtol_r+0xe8>
 80a257e:	1e69      	subs	r1, r5, #1
 80a2580:	6011      	str	r1, [r2, #0]
 80a2582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a2586:	2430      	movs	r4, #48	; 0x30
 80a2588:	2b00      	cmp	r3, #0
 80a258a:	d1b1      	bne.n	80a24f0 <_strtol_r+0x58>
 80a258c:	2308      	movs	r3, #8
 80a258e:	e7af      	b.n	80a24f0 <_strtol_r+0x58>
 80a2590:	230a      	movs	r3, #10
 80a2592:	e7ad      	b.n	80a24f0 <_strtol_r+0x58>
 80a2594:	2c30      	cmp	r4, #48	; 0x30
 80a2596:	d0a3      	beq.n	80a24e0 <_strtol_r+0x48>
 80a2598:	e7aa      	b.n	80a24f0 <_strtol_r+0x58>
 80a259a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a259e:	bf00      	nop
 80a25a0:	20000308 	.word	0x20000308

080a25a4 <strtol>:
 80a25a4:	4613      	mov	r3, r2
 80a25a6:	460a      	mov	r2, r1
 80a25a8:	4601      	mov	r1, r0
 80a25aa:	4802      	ldr	r0, [pc, #8]	; (80a25b4 <strtol+0x10>)
 80a25ac:	6800      	ldr	r0, [r0, #0]
 80a25ae:	f7ff bf73 	b.w	80a2498 <_strtol_r>
 80a25b2:	bf00      	nop
 80a25b4:	2000036c 	.word	0x2000036c

080a25b8 <dynalib_user>:
 80a25b8:	080a001d 080a005d 080a0089 080a008d     ....]...........
 80a25c8:	00000000 67697262 656e7468 73007373     ....brightness.s
 80a25d8:	72427465 74686769 7373656e 746f6e00     etBrightness.not
 80a25e8:	4f796669 6c61436e 6564006c 6c756166     ifyOnCall.defaul
 80a25f8:	756f5274 656e6974 00000000              tRoutine....

080a2604 <CSWTCH.215>:
 80a2604:	0000012c 00000018 000001f4 0000012c     ,...........,...
 80a2614:	00000050                                P...

080a2618 <_ZTV7TwoWire>:
	...
 80a2620:	080a18ff 080a1949 080a1921 080a1901     ....I...!.......
 80a2630:	080a1929 080a1931 080a1939 080a1941     )...1...9...A...

080a2640 <_ZTV9IPAddress>:
	...
 80a2648:	080a198f 080a1981 080a1983 6e6c0066     ............f.ln
 80a2658:	006e6600 65646f63 74656400 006c6961     .fn.code.detail.
 80a2668:	25000a0d 75303130 205d0020 00642500     ...%010u .] .%d.
 80a2678:	2800202c 00203a29 63005b20 2065646f     , .(): . [.code 
 80a2688:	2500203d 65640069 6c696174 203d2073     = .%i.details = 
 80a2698:	75616200 65530064 6c616972 42535500     .baud.Serial.USB
 80a26a8:	69726553 00316c61 65707974 72617000     Serial1.type.par
 80a26b8:	63006d61 6900646d 6e680064 74730064     am.cmd.id.hnd.st
 80a26c8:	66006d72 00746c69 006c766c 48646461     rm.filt.lvl.addH
 80a26d8:	6c646e61 72007265 766f6d65 6e614865     andler.removeHan
 80a26e8:	72656c64 756e6500 6e61486d 72656c64     dler.enumHandler
 80a26f8:	534a0073 74534e4f 6d616572 48676f4c     s.JSONStreamLogH
 80a2708:	6c646e61 61007265 6e007070 00656e6f     andler.app.none.
 80a2718:	63617274 6e690065 77006f66 006e7261     trace.info.warn.
 80a2728:	6f727265 61700072 0063696e              error.panic.

080a2734 <_ZTV8SPIClass>:
	...
 80a273c:	080a1ad9 080a1adb 2b25005a 3a643330     ........Z.%+03d:
 80a274c:	75323025 2d592500 252d6d25 48255464     %02u.%Y-%m-%dT%H
 80a275c:	3a4d253a 7a255325 63736100 656d6974     :%M:%S%z.asctime
 80a276c:	00000000                                ....

080a2770 <_ZTV11USARTSerial>:
	...
 80a2778:	080a1c5d 080a1c81 080a1c8d 080a1a05     ]...............
 80a2788:	080a1c69 080a1c75 080a1c6f 080a1c7b     i...u...o...{...
 80a2798:	080a1c5f 080a1c63                       _...c...

080a27a0 <_ZTV9USBSerial>:
	...
 80a27a8:	080a1d35 080a1d79 080a1d53 080a1a05     5...y...S.......
 80a27b8:	080a1d4d 080a1d37 080a1d3f 080a1d73     M...7...?...s...
 80a27c8:	080a1d47 080a1d31                       G...1...

080a27d0 <_ZTVN5spark9WiFiClassE>:
	...
 80a27d8:	080a1e9f                                ....

080a27dc <_ctype_>:
 80a27dc:	20202000 20202020 28282020 20282828     .         ((((( 
 80a27ec:	20202020 20202020 20202020 20202020                     
 80a27fc:	10108820 10101010 10101010 10101010      ...............
 80a280c:	04040410 04040404 10040404 10101010     ................
 80a281c:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a282c:	01010101 01010101 01010101 10101010     ................
 80a283c:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a284c:	02020202 02020202 02020202 10101010     ................
 80a285c:	00000020 00000000 00000000 00000000      ...............
	...

080a28e0 <__sf_fake_stdin>:
	...

080a2900 <__sf_fake_stdout>:
	...

080a2920 <__sf_fake_stderr>:
	...
 80a2940:	00000043                                         C.

080a2942 <link_const_variable_data_end>:
	...

080a2944 <link_constructors_location>:
 80a2944:	080a022d 	.word	0x080a022d
 80a2948:	080a15bd 	.word	0x080a15bd
 80a294c:	080a19f5 	.word	0x080a19f5
 80a2950:	080a1abd 	.word	0x080a1abd
 80a2954:	080a1c09 	.word	0x080a1c09
 80a2958:	080a1c49 	.word	0x080a1c49
 80a295c:	080a1ea9 	.word	0x080a1ea9
 80a2960:	080a20dd 	.word	0x080a20dd
 80a2964:	080a210d 	.word	0x080a210d
 80a2968:	080a215d 	.word	0x080a215d
 80a296c:	080a2221 	.word	0x080a2221
 80a2970:	080a22a5 	.word	0x080a22a5
 80a2974:	080a2329 	.word	0x080a2329

080a2978 <link_constructors_end>:
	...
